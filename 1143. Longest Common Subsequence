/*
1143. Longest Common Subsequence

Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.

Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
 

Constraints:

1 <= text1.length, text2.length <= 1000
text1 and text2 consist of only lowercase English characters.*/


class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int len1 = text1.size(), len2 = text2.size();          

        // dp[i][j] = LCS length for text1[0..i-1] and text2[0..j-1]
        vector<vector<int>> dp(len1 + 1, vector<int>(len2 + 1, 0));

        // Fill the dp array
        for(int i = 1; i <= len1; i++) 
        {
            for(int j = 1; j <= len2; j++) 
            {
                if(text1[i-1] == text2[j-1]) 
                {
                    dp[i][j] = dp[i-1][j-1] + 1;  // Match case
                } 
                else 
                {
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);  // Non-match case
                }
            }
        }

        // The answer is stored at dp[len1][len2]
        return dp[len1][len2];
    }
};
