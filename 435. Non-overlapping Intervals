/*
435. Non-overlapping Intervals

Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

Note that intervals which only touch at a point are non-overlapping. For example, [1, 2] and [2, 3] are non-overlapping.

 

Example 1:

Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.

Example 2:

Input: intervals = [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.

Example 3:

Input: intervals = [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.
 

Constraints:

1 <= intervals.length <= 105
intervals[i].length == 2
-5 * 104 <= starti < endi <= 5 * 104*/


class Solution {
public:
    
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<>> pq;       //min heap of pairs

        for(auto v:intervals)       //we push intervals as pairs,effectively sorting them
        pq.push({v[0],v[1]});

        vector<vector<int>> mod;        //modified vector of intervals;we follow strategy of storing intervals which start as early as possible. if there are multiple of them,we choose those who end as early as possible to remain. rest are discarded.

        while(!pq.empty())
        {
            if(mod.size()==0||mod.back()[1]<=pq.top().first)            //non-overlapping intervals
            {
                mod.push_back({pq.top().first,pq.top().second});
                pq.pop();
            }
            else 
            {                                                       //overlapping so we follow above strategy
                mod.back()[1]=min(mod.back()[1],pq.top().second);
                pq.pop();
            }
        }
        return (int)(intervals.size()-mod.size());
    }
};
