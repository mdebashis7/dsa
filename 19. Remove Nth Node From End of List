/*

19. Remove Nth Node From End of List

Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:

Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:

Input: head = [1], n = 1
Output: []

Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz
 

Follow up: Could you do this in one pass?*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */


class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(n==1&& head->next==nullptr) return nullptr;      //list has 1 node and n=1 so we remove the only node and return nullptr

        auto slow=head,fast=head;                   //we move fast to n-1 nodes ahead of slow

        for(int i=0;i<n;i++)
        fast=fast->next;

        if(fast==nullptr) return head->next;        //if fast==nullptr,this means first node is to be removed

        while(fast!=nullptr)                        //we move slow and fast by 1 step each,per iteration
        {
            if(fast->next!=nullptr)
            {
                slow=slow->next;
                fast=fast->next;
            }
            else                                    //we fast->next==nullptr, we know that we have to remove slow->next node so we set it to slow->next->next; 
            {
                slow->next=slow->next->next;
                break;
            }
        }

        return head;
    }
};
