/*
452. Minimum Number of Arrows to Burst Balloons

There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.

Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.

Given the array points, return the minimum number of arrows that must be shot to burst all balloons.

 

Example 1:

Input: points = [[10,16],[2,8],[1,6],[7,12]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].
- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].
Example 2:

Input: points = [[1,2],[3,4],[5,6],[7,8]]
Output: 4
Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows.
Example 3:

Input: points = [[1,2],[2,3],[3,4],[4,5]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].
- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].
 

Constraints:

1 <= points.length <= 105
points[i].length == 2
-231 <= xstart < xend <= 231 - 1*/
class Solution {
public:
    static bool comp(vector<int>& a,vector<int>& b)
    {
        return a[1]<b[1];
    }

    int findMinArrowShots(vector<vector<int>>& points) {
        if(points.size()==1) return 1;              //just 1 balloon so just 1 arrow required

        sort(points.begin(),points.end(),comp);     //we sort the balloons according to their right boundary in ascending order


        int ans=0;                      //stores minimum no.of arroes required
        
        for(int i=0;i<points.size();)
        {
            //we iterate through the balloons by i and store their end point in a
            
            long long a=points[i][1];          
            

            long long x=INT_MAX;
            for(int j=i;j<points.size();j++)
            {
                //then we iterate through next balloons to find a balloon at index j that has starts after the end point a. 
                if(points[j][0]>a)
                {
                    x=j;break;
                }
                
            }  
            //the balloons between [i,j) can be destroyed by 1 arrow.So we increment ans by 1 
            ans++;

            //if x!=INT_MAX,it means j exists within bounds of points and we update i to j.or else j==points.size() and it means all balloons have been burst so we can exit from the loop          
            if(x==INT_MAX)break;
            else i=x;
        }

        return ans;
    }
};
