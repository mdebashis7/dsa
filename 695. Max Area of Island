/*
695. Max Area of Island

You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

 

Example 1:


Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.
Example 2:

Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 50
grid[i][j] is either 0 or 1.
*/

class Solution {
public:
    void dfs(vector<vector<int>>& grid,vector<vector<bool>>& visited,int i,int j,int& m,int& n,int& curr)
    {
        if(i<0||i>=m||j<0||j>=n||visited[i][j]||grid[i][j]==0) return;  //if we go off the grid or we have visited the square before or if it water,we return

        visited[i][j]=true;curr++;                //we mark the sqaure as visited and add its area to current area curr.then we undergo dfs in all 4 directions
        dfs(grid,visited,i+1,j,m,n,curr);
        dfs(grid,visited,i-1,j,m,n,curr);
        dfs(grid,visited,i,j+1,m,n,curr);
        dfs(grid,visited,i,j-1,m,n,curr);
    }
    
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int ans=0,m=grid.size(),n=grid[0].size();                //ans holds max area of an island,m and n stores dimensions of grid
        vector<vector<bool>> visited(m,vector<bool>(n,false));  //stores if we have visited the island or not
        for(int i=0;i<m;i++)                            //we iterate through the grid and go dfs if the grid square is 1 and we havent visited it before
        for(int j=0;j<n;j++)
        if(grid[i][j]==1&&visited[i][j]==false)
        {
            int curr=0;                      //stores current area of island
            dfs(grid,visited,i,j,m,n,curr);
            ans=max(ans,curr);              //after evaluating current area of island,we compare it with ans,and if it is mor etahn ans,we store that in ans
        }

        return ans;                //finally we return ans
    }
};
