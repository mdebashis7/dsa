/*
49. Group Anagrams

Given an array of strings strs, group the anagrams together. You can return the answer in any order.*/
 

/*Example 1:
Input: strs = ["eat","tea","tan","ate","nat","bat"]

Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Explanation:

There is no string in strs that can be rearranged to form "bat".
The strings "nat" and "tan" are anagrams as they can be rearranged to form each other.
The strings "ate", "eat", and "tea" are anagrams as they can be rearranged to form each other.*/

/*Example 2:
Input: strs = [""]

Output: [[""]]*/

/*Example 3:
Input: strs = ["a"]

Output: [["a"]]*/
 

/*Constraints:

1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.
*/


class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string,int> hashmap;    //hashmap to map string in ascending order to the index it corresponds in the ans vector
        int c=0;
        vector<vector<string>> ans;           //vector of groups of strings which are anagrams hence have same sorted order

        for(auto s:strs)
        {
            string str=s;
            sort(str.begin(),str.end());         //sort a copy of the string
            if(hashmap.find(str)==hashmap.end())   //if the sorted string is not in the hashmap, we assign an index to it, and push the original string in the ans vector inside a container vector
            {
                hashmap[str]=c++;               //we increment c so as to store the next index, next time this happens
                ans.push_back({s});
            }
            else
            ans[hashmap[str]].push_back(s);     //else if sorted string exists in hashmap, we extract the corresponding index in the ans vector from the hashmap and push the original string in that group
        }

        return ans;
    }
};
