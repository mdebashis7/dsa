/*66. Plus One

You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

 

Example 1:

Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
Example 2:

Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].
Example 3:

Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].
 

Constraints:

1 <= digits.length <= 100
0 <= digits[i] <= 9
digits does not contain any leading 0's.*/

class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        reverse(digits.begin(),digits.end());       //we reverse the gigits so as to start addition from least significant digit.this would help later on.
        int c=1;                //we have to add 1 to original number

        //we loop through digits and add carry to each digit.if sum is <10,we let it store in place of the digits.else we carry sum/10 as carry and store sum/10 in place of digit
        for(auto& i:digits)
        {
            i+=c;
            if(i>=10)
            {
                c=i/10;
                i%=10;
            }
            else
            {
                c=0;
            }
        }
        //if at end of digits,carry is still non-zero,it needs to be added to the side of most significant sigits at end
        while(c!=0)
        {
            digits.push_back(c%10);
            c/=10;
        }
        reverse(digits.begin(),digits.end());   //to return to order of most significant to least significant
        return digits;
    }
};
