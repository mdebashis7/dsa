/*
71. Simplify Path

You are given an absolute path for a Unix-style file system, which always begins with a slash '/'. Your task is to transform this absolute path into its simplified canonical path.

The rules of a Unix-style file system are as follows:

A single period '.' represents the current directory.
A double period '..' represents the previous/parent directory.
Multiple consecutive slashes such as '//' and '///' are treated as a single slash '/'.
Any sequence of periods that does not match the rules above should be treated as a valid directory or file name. For example, '...' and '....' are valid directory or file names.
The simplified canonical path should follow these rules:

The path must start with a single slash '/'.
Directories within the path must be separated by exactly one slash '/'.
The path must not end with a slash '/', unless it is the root directory.
The path must not have any single or double periods ('.' and '..') used to denote current or parent directories.
Return the simplified canonical path.

 

Example 1:

Input: path = "/home/"

Output: "/home"

Explanation:

The trailing slash should be removed.

Example 2:

Input: path = "/home//foo/"

Output: "/home/foo"

Explanation:

Multiple consecutive slashes are replaced by a single one.

Example 3:

Input: path = "/home/user/Documents/../Pictures"

Output: "/home/user/Pictures"

Explanation:

A double period ".." refers to the directory up a level (the parent directory).

Example 4:

Input: path = "/../"

Output: "/"

Explanation:

Going one level up from the root directory is not possible.

Example 5:

Input: path = "/.../a/../b/c/../d/./"

Output: "/.../b/d"

Explanation:

"..." is a valid name for a directory in this problem.

 

Constraints:

1 <= path.length <= 3000
path consists of English letters, digits, period '.', slash '/' or '_'.
path is a valid absolute Unix path.*/


class Solution {
public:
    string simplifyPath(string path) {
        stack<string> st,revStack;          //st stores folders with parent at bottom and revStack stores same with parent at top


        //first we replace multiple consecutive slashes with single slash 
        int f=path.find("//");
        while(f!=-1)
        {
            path.replace(f,2,"/");
            f=path.find("//");
        }

        //if path start with /, we remove that to get name of root folder
        while(path[0]=='/')
        path.replace(0,1,"");

        string str="";
        for(int i=0;i<path.size();i++)
        {
            //we iterate through characters of the path. 
            if(path[i]!='/')    //we collect the characters in string str
            str+=path[i];
            else
            {
                //if the encountered character is slash,we either put in into the stack st,or take appropriate action and then update str="".
                if(str=="..")
                {
                    if(!st.empty())
                    st.pop();
                }
                else if(str==".")
                {

                }
                else
                st.push(str);

                str="";
            }
        }

        //after iterations through characters,if str is not empty,we either put it into stack or take appropriate action
        if(str.size()!=0)
        {
            if(str=="..")
                {
                    if(!st.empty())
                    st.pop();
                }
                else if(str==".")
                {

                }
                else
                st.push(str);
        }

        //then to create string path,we move stack elements into revStack
        while(!st.empty())
        {
            revStack.push(st.top());
            st.pop();
        }
        //From revStack,we create ans string 
        string ans="";
        while(!revStack.empty())
        {
            ans+='/';
            ans+=revStack.top();
            revStack.pop();
        }

        if(ans.size()==0) return "/";       //means we are at root directory
        else
        return ans;

    }
};
