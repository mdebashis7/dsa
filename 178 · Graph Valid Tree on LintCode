/*
178 Â· Graph Valid Tree on LintCode


Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

Example 1:

Input: n = 5 edges = [[0, 1], [0, 2], [0, 3], [1, 4]]
Output: true.
Example 2:

Input: n = 5 edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]]
Output: false.
*/


class Solution {
public:
    /**
     * @param n: An integer
     * @param edges: a list of undirected edges
     * @return: true if it's a valid tree, or false
     */
    void dfs(int& n,vector<unordered_set<int>>& e,int parent,int curr,unordered_set<int>& visited,bool& flag)
    {
        if(flag==false) return;                         

        if(visited.find(curr)!=visited.end())           //if node is already visited,it means a cycle hence not a tree
        {
            flag=false;return;
        }

        visited.insert(curr);

        for(auto c:e[curr])
        {
            if(c!=parent)                               //to ensure not to flow back to the parent
            dfs(n,e,curr,c,visited,flag);
        }
    }

    bool validTree(int n, vector<vector<int>> &edges) {

        if(edges.size()!=n-1) return false;     //a tree with n nodes has n-1 edges 

        vector<unordered_set<int>> e(n);        //stores neighbors of nodes

        for(auto v:edges)
        {
            e[v[0]].insert(v[1]);
            e[v[1]].insert(v[0]);
        }        
        

        bool flag=true;                         //flag to check if tree is valid
        
        unordered_set<int> visited;             //stores visited nodes

        dfs(n,e,-1,0,visited,flag);             //DFS from 0th node initiated

        if(visited.size()!=n)                   //shows graph is disconnected
        return false;   
        

        return flag;
    }
};
