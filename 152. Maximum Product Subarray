/*
152. Maximum Product Subarray

Given an integer array nums, find a subarray that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
 

Constraints:

1 <= nums.length <= 2 * 104
-10 <= nums[i] <= 10
The product of any subarray of nums is guaranteed to fit in a 32-bit integer.*/


class Solution {
public:
    int maxProduct(vector<int>& nums) {
        if(nums.size()==1) return nums[0];              //only element

        int ans=*max_element(nums.begin(),nums.end());  //stores max product
        int curr=1;                                        //stores current product
        int left=0,right=0;                                    //stores index boundary of subarray
        while(right<nums.size())
        {
            if(nums[right]!=0)                          //if element!=0, calculate current product and match if it exceeds ans
            {
                curr*=nums[right];
                ans=max(curr,ans);
                right++;                                //update right boundary as well
            }
            else                                        //if element==0,shrink subarray from left and compare it with ans
            {
                while(left<right-1)                         
                {
                    curr/=nums[left];                   //divide element at left to find product of subarray
                    ans=max(curr,ans);
                    left++;                             //update left boundary
                }

                //update current product and left and right indexes to be next non-zero number
                curr=1;                                 
                left=right;

                while(left<nums.size()&&nums[left]==0)                
                    left++;

                while(right<nums.size()&&nums[right]==0)
                    right++;
            }
        }

        //shrink left index after right index moves out of nums and compare current product to ans
        while(left<right-1)                     
        {
            curr/=nums[left];
            ans=max(curr,ans);
            left++;
        }
        
        return ans;
    }
};
