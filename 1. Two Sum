/*

1.Two sum

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.*/ 

/*Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]*/
 

/*Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists. 

Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?*/

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        if(target%2==0)         //segment to check if target/2 exists twice in the array
        {
            int first,second;
            auto itr=find(nums.begin(),nums.end(),target/2); //points to first occurence of target/2
            if(itr!=nums.end())
            {
                first=itr-nums.begin();                         //first index
                itr=find(nums.begin()+first+1,nums.end(),target/2); //points to second occurence of target/2
                if(itr!=nums.end())
                {
                    second=itr-nums.begin();                    //second index
                    return {first,second};
                }
            }
        }

        unordered_map<int,int> hashmap;     //hashmap to store original indexes of numbers before sorting
        
        for(auto i=0;i<nums.size();i++)
        hashmap[nums[i]]=i;

        sort(nums.begin(),nums.end());    //sorting to implement 2 pointers method 
        
        int left=0,right=nums.size()-1;     //2 pointers

        while(left<=right)
        {
            if(nums[left]+nums[right]==target)
            return {hashmap[nums[left]],hashmap[nums[right]]};      //return original indexes of left and right numbers if sum of left number and right number is equal to target

            else if(nums[left]+nums[right]>target)
            right--;                    //if sum is greater than target decrement right index

            else
            left++;                     //if sum is less than target increment left index
        }

        return {};                      //if no such combination exists, empty vector is returned
    }
};
