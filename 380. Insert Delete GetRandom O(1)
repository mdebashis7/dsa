/*
380. Insert Delete GetRandom O(1)

Implement the RandomizedSet class:

RandomizedSet() Initializes the RandomizedSet object.
bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.
bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.
int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.
You must implement the functions of the class such that each function works in average O(1) time complexity.

 

Example 1:

Input
["RandomizedSet", "insert", "remove", "insert", "getRandom", "remove", "insert", "getRandom"]
[[], [1], [2], [2], [], [1], [2], []]
Output
[null, true, false, true, 2, true, false, 2]

Explanation
RandomizedSet randomizedSet = new RandomizedSet();
randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.
randomizedSet.remove(2); // Returns false as 2 does not exist in the set.
randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].
randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.
randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].
randomizedSet.insert(2); // 2 was already in the set, so return false.
randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.
 

Constraints:

-231 <= val <= 231 - 1
At most 2 * 105 calls will be made to insert, remove, and getRandom.
There will be at least one element in the data structure when getRandom is called.*/


class RandomizedSet {
public:
    unordered_map<int,int> mp;          //maps element to its index in v
    vector<int> v;                      //stores elements
    RandomizedSet() {
        
    }
    
    bool insert(int val) {
        //if element not found, stores it at end of v, stores it in hashmap with its index in v and then return true.else returns false

        if(mp.find(val)==mp.end())      
        {
            v.push_back(val);
            mp[val]=v.size()-1;
            return true;
        }
        return false;
    }
    
    bool remove(int val) {
        //if element not found,returns false.else we swap it with last element in v and do the respective index change in hashmap as well.then we erase the element from hashmap and popoff the element from v from back.then return true

        if(mp.find(val)==mp.end())
        {
            return false;
        }

        int ind=mp[val];

        mp[v.back()]=ind;

        swap(v[ind],v.back());
        
        mp.erase(val);
        v.pop_back();

        return true;
    }
    
    int getRandom() {
        //we generate a random number between 0 and v.size()-1 and return rth number from v
        
        int r=rand();
        r%=(int)v.size();
        return v[r];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
