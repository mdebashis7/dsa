/*

102. Binary Tree Level Order Traversal

Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

 

Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]

Example 2:

Input: root = [1]
Output: [[1]]

Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-1000 <= Node.val <= 1000*/



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        queue<pair<TreeNode*,int>> q;                   //queue to store node and corresponding depth
        if(root!=nullptr)                               //to push the root into it for BFS if not nullptr
        q.push({root,0});

        vector<vector<int>> ans;

        while(!q.empty())
        {
            auto x=q.front();
            q.pop();

            if(x.second<ans.size())                          //if vector is available,insert into it
            ans[x.second].push_back(x.first->val);
            else
            ans.push_back({x.first->val});                   //else insert into new vector and push the vector into ans

            if(x.first->left)                                //push the child nodes into the queue if not nullptrs
            q.push({x.first->left,x.second+1});

            if(x.first->right)
            q.push({x.first->right,x.second+1});
        }

        return ans;
    }
};
