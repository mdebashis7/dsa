/*

143. Reorder List


You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

 

Example 1:

Input: head = [1,2,3,4]
Output: [1,4,2,3]

Example 2:

Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]
 

Constraints:

The number of nodes in the list is in the range [1, 5 * 104].
1 <= Node.val <= 1000*/


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rev(ListNode* head)                              //to reverse linked list
    {
        if(head==nullptr||head->next==nullptr) return head;
        auto h=head,prev=head,next=head;
        prev=nullptr;
        while(h!=nullptr)
        {
            next=h->next;
            h->next=prev;
            prev=h;
            h=next;
        }
        return prev;
    }
    void reorderList(ListNode* head) {
        if(head==nullptr||head->next==nullptr||head->next->next==nullptr) return;     //no need to perform operation in these cases

        auto h=head;                   //we count number of nodes first,which is stored in n
        int n=0;
        while(h!=nullptr)
        {
            n++;
            h=h->next;
        }

        int c=0;                       //we store first half of list in f and second part of list in s.we know the midpoint via c when c=n-n/2
        auto f=head,s=head;
        h=head;

        while(h!=nullptr)
        {
            c++;
            if(c==n-n/2)
            {s=h->next;
            h->next=nullptr;break;}
            h=h->next;
        }

        s=rev(s);                    //then we reverse the second half of list and then interweave the nodes in alternative manner to give desired result
        while(s!=nullptr)
        {
            auto fnxt=f->next,snxt=s->next;
            f->next=s;
            s->next=fnxt;
            f=fnxt;
            s=snxt;
        }
    
    }
};
