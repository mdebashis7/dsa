/*

143. Reorder List


You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

 

Example 1:

Input: head = [1,2,3,4]
Output: [1,4,2,3]

Example 2:

Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]
 

Constraints:

The number of nodes in the list is in the range [1, 5 * 104].
1 <= Node.val <= 1000*/


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */


class Solution {
public:
    void reorderList(ListNode* head) {
        if(head==nullptr||head->next==nullptr||head->next->next==nullptr) return;       //if list has 0,1,or 2 nodes, no reordering required

        vector<ListNode*> nodes;    //we put all nodes in a vector
        auto h=head;
        while(h!=nullptr)
        {
            nodes.push_back(h);
            h=h->next;
        }

        int left=0,right=nodes.size()-1;        //we set 2 indexes left and right and link them as desired in the problem
        while(left<right)
        {
            nodes[left]->next=nodes[right];
            left++;
            if(left<right)
            {
                nodes[right]->next=nodes[left];
                right--;
            }
        }
        nodes[nodes.size()/2]->next=nullptr;    //in the middlemost node, we set its next node to nullptr to mark end of list
    }
};
