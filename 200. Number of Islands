/*
200. Number of Islands

Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1

Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.*/


class Solution {
public:
    void dfs(vector<vector<char>>& grid,vector<vector<bool>>& visited,int i,int j,int& m,int& n)
    {
        if(i<0||i>=m||j<0||j>=n||grid[i][j]=='0'||visited[i][j]==true)  //if i or j go out of bounds or if cell has 0 or it has been previously visited, we return
        return;

        visited[i][j]=true;             //mark cell as visited
                                                
                                        //dfs to neighbouring cells
        dfs(grid,visited,i+1,j,m,n);
        dfs(grid,visited,i-1,j,m,n);
        dfs(grid,visited,i,j+1,m,n);
        dfs(grid,visited,i,j-1,m,n);
    }
    int numIslands(vector<vector<char>>& grid) {
        int m=grid.size(),n=grid[0].size();                     //dimensions of grid
        
        vector<vector<bool>> visited(m,vector<bool> (n,false));     //to know if a pixel has been visited or not

        int ans=0;                                          //to count number of islands

        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]=='1'&&visited[i][j]==false)       //if pixel is 1 and not visited yet, we go for a DFS and visit its connected cells and increment ans 
                {
                    dfs(grid,visited,i,j,m,n);      
                    ans++;
                }
            }
        }

        return ans;
    }
};
