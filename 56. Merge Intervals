/*
56. Merge Intervals

Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104*/


class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<>> pq;       //min heap of pairs

        for(auto v:intervals)       //we push intervals as pairs,effectively sorting them
        pq.push({v[0],v[1]});

        intervals.clear();          //so that it can be reused as ans vector
        
        

        while(!pq.empty())
        {
            if(intervals.size()==0||intervals.back()[1]<pq.top().first)     //means no merging required
            {
                auto x=pq.top();
                intervals.push_back({x.first,x.second});
                pq.pop();
            }
            else
            {
                intervals.back()[1]=max(pq.top().second,intervals.back()[1]);   //merging done as upper bound is max of current upper bound and end of top interval in pq
                pq.pop();
            }
        }

        return intervals;
    }
};
