/*
226. Invert Binary Tree

Given the root of a binary tree, invert the tree, and return its root.

 

Example 1:

Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]

Example 2:

Input: root = [2,1,3]
Output: [2,3,1]

Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100*/



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    void dfs(TreeNode* r)
    {
        if(r==nullptr) return;

        dfs(r->left);               //dfs of left subtree

        dfs(r->right);              //dfs of right subtree

        swap(r->left,r->right);     //after dfs of both nodes swap the nodes so left subtree goes to right side and vice versa
    }
    TreeNode* invertTree(TreeNode* root) {
        if(root==nullptr) return root;

        dfs(root);              //dfs of root node
        
        return root;
    }
};
