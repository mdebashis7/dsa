/*
169. Majority Element

Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3

Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109*/

/*Boyer–Moore majority vote algorithm takes O(n) time and O(1) space*/
/*normal solution involves hashmap which takes O(n) space*/

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int candidate=-1,votes=0;

        //candidate means current number and votes mean count of that. if nums[i]==candidate,we increment votes,else we decrement it;
        //if votes==0,it means our current candidate can't have majority so we change our candidate to current nums[i]
        for(int i=0;i<nums.size();i++)
        {
            if(votes==0)
            {
                candidate=nums[i];
                votes=1;
            }
            else
            {
                if(candidate==nums[i]) votes++;
                else votes--;
            }
        }

        //now in votes we store actual count of candidate, which we got after the 1st pass
        votes=0;
        for(auto i:nums)
        if(i==candidate)
        votes++;


        if(votes>(nums.size()/2))   //it means our candidate is majority element
        return candidate;

        return -1;

    }
};
