/*
79. Word Search

Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

 

Example 1:

Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true

Example 2:

Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true

Example 3:

Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false
 

Constraints:

m == board.length
n = board[i].length
1 <= m, n <= 6
1 <= word.length <= 15
board and word consists of only lowercase and uppercase English letters.
 

Follow up: Could you use search pruning to make your solution faster with a larger board?*/



class Solution {
public:
    void dfs(vector<vector<char>>& board, string& word,int i,int j,int ind,vector<vector<bool>>& visited,bool& ans)
    {
        if(ind==word.size()-1)          //if we reach end of word, return ans=true;
        {
            ans=true;return;
        }

        //cout<<i<<" "<<j<<endl;

        visited[i][j]=true;                     //cell is visited

        if(i+1<board.size() && visited[i+1][j]==false && (board[i+1][j]==word[ind+1]))  //bottom cell branch
        dfs(board,word,i+1,j,ind+1,visited,ans);                                        

        if(ans==true) return;               //early exit

        if(i-1>=0 && visited[i-1][j]==false && (board[i-1][j]==word[ind+1]))        //upper cell branch
        dfs(board,word,i-1,j,ind+1,visited,ans);

        if(ans==true) return;               //early exit

        if(j+1<board[0].size() && visited[i][j+1]==false && (board[i][j+1]==word[ind+1]))       //right cell branch
        dfs(board,word,i,j+1,ind+1,visited,ans);

        if(ans==true) return;           //early exit


        if(j-1>=0 && visited[i][j-1]==false && (board[i][j-1]==word[ind+1]))        //left cell branch
        dfs(board,word,i,j-1,ind+1,visited,ans);

        
        visited[i][j]=false;            //unvisit cell if non of above branches turn ans to be true
        

    }
    bool exist(vector<vector<char>>& board, string word) {
        bool ans=false;
        int m=board.size(),n=board[0].size();

        unordered_map<char,int> wordmap,boardmap;           //first we check if every char in word is present in board or not,using hashmaps
        for(auto c:word)
        wordmap[c]++;

        for(auto i:board)
        for(auto j:i)
        boardmap[j]++;

        for(auto p:wordmap)                                 //if not, we return false
        if(boardmap[p.first]<p.second)                  
        return false;

        vector<vector<bool>> visited(m,vector<bool> (n,false));     //to keep account of visited cells
        for(int i=0;i<m;i++)                                //else we do a dfs search if first character matches board[i][j]
        {
            for(int j=0;j<n;j++)
            {
                if(board[i][j]==word[0])
                {
                    

                    dfs(board,word,i,j,0,visited,ans);

                    //cout<<endl;
                    if(ans==true) break;            //early exit condition

                }
            }
        }
        return ans;
    }
};
