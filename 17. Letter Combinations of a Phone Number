/*
17. Letter Combinations of a Phone Number

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].
*/

class Solution {
public:
    void func(string& digits,int ind,string& s,vector<string>& ans,unordered_map<char,vector<char>>& mp)
    {
        if(ind==digits.size())              //if index reaches end,we push the string into ans vector
        {
            ans.push_back(s);
            return;
        }
        for(char c:mp[digits[ind]])        //else we iterate across characters maped to digits digits[ind] and one by one adding it to s,calling the function with index ind+1 and then after control return,we pop the character off for next character to be added to s
        {
            s+=(c);
            func(digits,ind+1,s,ans,mp);
            s.pop_back();
        }
        
    }
    vector<string> letterCombinations(string digits) {
        if(digits.size()==0) return {};          
        
        string s="";                //stores string
        vector<string> ans;          //stores all possible strings

        unordered_map<char,vector<char>> mp;    //maps digits to alphabets
        char c='a';
        for(char i='2';i<='7';i++)
        {
            mp[i].push_back(char(c++));
            mp[i].push_back(char(c++));
            mp[i].push_back(char(c++));
        }
        mp['7'].push_back(char(c++));
        mp['8'].push_back(char(c++));
        mp['8'].push_back(char(c++));
        mp['8'].push_back(char(c++));
        mp['9'].push_back(char(c++));
        mp['9'].push_back(char(c++));
        mp['9'].push_back(char(c++));
        mp['9'].push_back(char(c++));

        func(digits,0,s,ans,mp);      //backtracking function called with index 1
        return ans;
    }
};
