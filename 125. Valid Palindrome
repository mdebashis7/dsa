/*
125. Valid Palindrome

A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.
 

Example 1:
Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.

Example 2:
Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.

Example 3:
Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.
 

Constraints:

1 <= s.length <= 2 * 105
s consists only of printable ASCII characters.
*/


class Solution {
public:
    bool isPalindrome(string s) {

       int i=0,j=s.size()-1;

        for(int i=0;i<s.size();i++)     //convert all uppercase characters to lowercase
        if(s[i]>='A'&&s[i]<='Z')
        s[i]=s[i]-'A'+'a';
        
        while(i<=j)
        {
            if((s[i]>='A'&&s[i]<='Z')||(s[i]>='a'&&s[i]<='z')||(s[i]>='0'&&s[i]<='9'))      //we check if s[i] is alphanumeric else we increment it
            {
                if((s[j]>='A'&&s[j]<='Z')||(s[j]>='a'&&s[j]<='z')||(s[j]>='0'&&s[j]<='9'))  //we check if s[j] is alphanumeric else we decrement it
                {
                    if(s[i]==s[j])    //if s[i] is equal to s[j],we update both,else we return false as characters mismatched
                    {
                        i++;j--;
                    }
                    else
                    return false;
                }
                else j--;
            }
            else
            i++;
        }
        return true;    //confirms string is palindrome
    }
};
