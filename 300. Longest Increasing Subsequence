/*
300. Longest Increasing Subsequence

Given an integer array nums, return the length of the longest strictly increasing subsequence.

 

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4

Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1
 

Constraints:

1 <= nums.length <= 2500
-104 <= nums[i] <= 104
 

Follow up: Can you come up with an algorithm that runs in O(n log(n)) time complexity?*/


class Solution {
public:

    int lengthOfLIS(vector<int>& nums) {
        vector<int> dp(nums.size());            //dp array storing longest increasing subsequence ending at an index i

        for(int i=0;i<nums.size();i++)          //we iterate through the array
        {
           
            dp[i]=1;                            //we initialize it to 1; it works if it is the min number yet

            //we iterate from 0 to i-1 to max longest increasing subsequence that ends at index i
            for(int j=i-1;j>=0;j--)
            {
                if(nums[j]<nums[i])
                dp[i]=max(dp[i],dp[j]+1);
            }

        }


        return *max_element(dp.begin(),dp.end());           //we return max element of dp
    }
};
