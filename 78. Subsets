/*
78. Subsets
Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.
*/
class Solution {
public:
    void func(vector<int>& nums,int i,vector<int>& v,vector<vector<int>>& ans)
    {
        if(i==nums.size())                  //it means,we have considered all indexes in nums and now its times to put the subset in the collection of subsets
        {
            ans.push_back(v);
            return;
        }
        v.push_back(nums[i]);            //it means ith index is pushed onto the subset and then the function is called with next index in consideration
        func(nums,i+1,v,ans);          
        v.pop_back();                        //it means ith index is not put into the subset and the function is called with the next index in consideration
        func(nums,i+1,v,ans);
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans;  //stores all subsets of nums
        vector<int> v;          //stores a subset of nums at a particular point of time
        func(nums,0,v,ans);      //we call backtracking function with index 0
        return ans;              //finally we return all subsets of nums
    }
};
