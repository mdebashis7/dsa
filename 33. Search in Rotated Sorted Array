/*

33. Search in Rotated Sorted Array


There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104*/


class Solution {
public:
    int pivot(vector<int>& nums) {
        if(nums.size()==1||nums[0]<nums.back()) return 0;     //if there is only 1 element then it is the smallest. also if the first number is less than the last, it means the array isn't rotated so the first is the smallest.

        int start=0,end=nums.size()-1;                      //indexes to show range of focus in binary search
        while(start<=end)
        {
            int mid=start+(end-start)/2;                    //mid index

            if(mid+1<nums.size()&&nums[mid]>nums[mid+1])            //if number at mid index is greater than the next number then the next number is smallest as it shows the boundary of separation
            return mid+1;

            else if(mid-1>=0&&nums[mid]<nums[mid-1])            //if the number at mid index is greater than the previous number then the number at mid index is smallest
            return mid;

            else if(nums[mid]>nums[0])                          //if number at mid index is more than first number then it shows the range to be focussed on is the second half of the array after mid upto end
            start=mid+1;

            else                                                //if number at mid index is less than first number then it shows the range to be focussed on is the first half of the array start upto mid
            end=mid-1;            
        }

        return 0;                                         //default case in case nothing is obtained from above proces
    }

    int bsearch(vector<int>& nums,int start,int end,int target)
    {                               //basic binary search which returns -1 if not found
        while(start<=end)
        {
            int mid=start+(end-start)/2;

            if(nums[mid]==target) return mid;

            else if(nums[mid]>target) end=mid-1;

            else start=mid+1;
        }

        return -1;
    }
    int search(vector<int>& nums, int target) {
        int p=pivot(nums);                                      //to see the boundary of separation of rotated array
        if(p==0) return bsearch(nums,0,nums.size()-1,target);   //if array isn't rotated, 1 binary search is needed
        else
        {                                                       //wlse we do 2 binary searches across 2 sections of the array and return the non -1 value if target is present inside the array
            int result1=bsearch(nums,0,p-1,target);
            int result2=bsearch(nums,p,nums.size()-1,target);

            if(result1==-1&&result2==-1) return -1;

            else if(result1==-1) return result2;

            else return result1;
        }

        return -1;
    }
};
