/*
110. Balanced Binary Tree

Given a binary tree, determine if it is height-balanced.

Height-Balanced
A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: true
Example 2:


Input: root = [1,2,2,3,3,null,null,4,4]
Output: false
Example 3:

Input: root = []
Output: true
 

Constraints:

The number of nodes in the tree is in the range [0, 5000].
-104 <= Node.val <= 104
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int dfs(TreeNode* r,bool& ans)
    {
        if(r==nullptr||ans==false) return 0;    //depth of nullptr is 0
        int l=dfs(r->left,ans);                //depth of left subtree
        int rt=dfs(r->right,ans);              //depth of right subtree
        if(abs(l-rt)>1) ans=false;              //if difference of depths is more than 1,it is not height-balanced
        return max(l,rt)+1;                    /return max depth+1,accounting for parent node of subtrees
    }
    bool isBalanced(TreeNode* root) {
        bool ans=true;
        int d=dfs(root,ans);
        return ans;
    }
};
