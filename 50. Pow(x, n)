50. Pow(x, n)

/*
Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

 

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
 

Constraints:

-100.0 < x < 100.0
-231 <= n <= 231-1
n is an integer.
Either x is not zero or n > 0.
-104 <= xn <= 104
*/

class Solution {
public:
    double myPow(double x, int n) {
        if(n==0||x==1) return 1;            //Anything to the power 0 is 1.Also 1 to the power anything is 1.

        if(n<0) x=1/x;                      //if exponent is negative,we do reciprocal of base.

        long long z=n;                     //we store exponent in a long long;helps prevent overflow in next step where we take absolute value of the exponent
        z=abs(z);

        double ans=x;                      //stores answer
        vector<int> v;                     //we divide the exponent by 2 repeatedly and store remainders in this vector
        while(z>1)
        {
            if(z%2==0)
            v.push_back(0);
            else
            v.push_back(1);
            z/=2;
        }

        //then we iterate the vector from end to begining.We square the answer in every iteration.if v[i] is odd,we multiple x to answer variable.
        for(int i=v.size()-1;i>=0;i--)
        {
            if(v[i]==1)ans=ans*ans*x;
            else
            ans=ans*ans;
        }

        return ans;             //finally we return the answer.
    }
};
