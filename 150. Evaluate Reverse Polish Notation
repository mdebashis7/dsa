/*
150. Evaluate Reverse Polish Notation

You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:

The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.
 

Example 1:

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:

Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6
Example 3:

Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
 

Constraints:

1 <= tokens.length <= 104
tokens[i] is either an operator: "+", "-", "*", or "/", or an integer in the range [-200, 200].*/

class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<string> st;           //to store numbers in string format

        //we iterate through the strings
        for(auto s:tokens)
        {
            //if the string is an operator, we pop out last 2 strings from the stack,do the respective operation and push the answer string into the stack
            if(s=="+"||s=="-"||s=="*"||s=="/")
            {
                int b=stoi(st.top());st.pop();
                int a=stoi(st.top());st.pop();
                if(s=="+") st.push(to_string(a+b));
                else if(s=="-") st.push(to_string(a-b));
                else if(s=="*") st.push(to_string(a*b));
                else st.push(to_string(a/b));
            }
            else    //we push the string into the stack as it is a number
            st.push(s);
        }
        //the last string on the stack is the answer
        return stoi(st.top());
    }
};
