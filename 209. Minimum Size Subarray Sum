/*
209. Minimum Size Subarray Sum

Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

 

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.

Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1

Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0
 

Constraints:

1 <= target <= 109
1 <= nums.length <= 105
1 <= nums[i] <= 104
 

Follow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)).*/

class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        long long ans=nums.size(),s=0;      //s stores sum and ans stores min size of subarray with sum>=target 

        //first we check if sum of whole of nums>=target or not.if not we return 0;
        for(auto i:nums)
        s+=i;

        if(s<target) return 0;

        int i=0,j=0;        //stores left and right boundary of subarray
        s=0;

        while(j<nums.size())
        {
            s+=nums[j];         //we include element after right boundary into the subarray
            
            //if sum of subarray is greater than target, we decrease size of subarray from left ans simulataneously record min size of the subarray in ans,until sum goes under target
            if(s>=target)
            {
                while(i<=j&&s>=target)
                {
                    ans=min(ans,(long long)j-i+1);
                    s-=nums[i];
                    i++;                    
                }
            }
            j++;
        }
        
        return ans;
    }
};
