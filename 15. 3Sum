/*
15. 3Sum

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets. 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.

Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
 

Constraints:

3 <= nums.length <= 3000
-105 <= nums[i] <= 105
*/

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;        //there should be no duplicates

        sort(nums.begin(),nums.end());  //sorts nums vector

        int left=0;                     //left index

        while(left<nums.size())
        {
            int mid=left+1,right=nums.size()-1;         //mid index and right index
            while(mid<right)                            //to ensure same number doesnt get passed off as both nums[mid] and nums[right]
            {
                int sum=nums[left]+nums[mid]+nums[right];
                if(sum==0)
                {
                    ans.push_back({nums[left],nums[mid],nums[right]});

                    while(mid+1<right&&nums[mid+1]==nums[mid])      //this loop to ensure same number doesnt get repeated in nums[mid]
                    mid++;

                    mid++;                                              //increments mid index after successful pushback

                    while(right-1>mid&&nums[right-1]==nums[right])      //this ensures same number doesnt get repeated in nums[right]
                    right--;

                    right--;                                            //decrements right index after successful pushback
                }
                else if(sum<0)
                {
                    mid++;                                              //increments mid index after unsuccessful  sum comparison
                }
                else 
                {
                    right--;                                            //decrements right index after unsuccessful sum comparison
                }
            }
            while(left+1<nums.size()&&nums[left+1]==nums[left])         //this ensures same number doesnt get repeated in nums[left]
            left++;

            left++;                                                     //increments left index
        }

        return ans;
    }
};
