/*
25. Reverse Nodes in k-Group

Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:


Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000
 

Follow-up: Can you solve the problem in O(1) extra memory space?
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
ListNode* rev(ListNode* head)                                //auxillary function to reverse list
{
    if(head==nullptr||head->next==nullptr) return head;
    auto h=head,prev=head,nxt=head;
    prev=nullptr;

    while(h!=nullptr)
    {
        nxt=h->next;
        h->next=prev;
        prev=h;
        h=nxt;
    }
    return prev;

}
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(k==1) return head;                    //if k==1,no need to reverse

        ListNode* ans=new ListNode(INT_MAX);    //we add an extra node at eginning to list as it helps to reverse first k nodes easily
        ans->next=head;

        auto h=ans;              //we count numbe rof nodes,excluding the node we added
        int n=0;
        h=head;
        while(h!=nullptr)
        {
            n++;
            h=h->next;
        }

        if(k==n) return rev(head);          //if k==number of nodes,we have to return reversed list

        for(int i=0;i<n/k;i++)                    //in list of n nodes,there would be n/k reversals
        {
            int start=i*k+1,end=(i+1)*k,cnt=-1;      //denotes index of starting and ending of part of main list,which is to be reversed,cnt helps to count the indx of nodes, later on while matching with start,end

            h=ans;                                //for traversal
            auto a=ans,b=ans,c=ans,d=ans;          //a denotes the right end of left list,b and c denotes start and end of sublist(to be reversed),d denotes the left end of right sublist
            while(h!=nullptr)                    //we assign nodes to a,b,c,d by traversing the list,wherever the index matches to assign that particular node to corresponding list variable
            {
                cnt++;
                if(cnt==start-1)a=h;
                else if(cnt==start)b=h;
                else if(cnt==end)c=h;
                else if(cnt==end+1)
                {
                    d=h;break;
                } 
                h=h->next;
            }

            c->next=nullptr;            //now we separate bc sublist from left sublist and right sublist
            a->next=nullptr;            

            auto cb=rev(b);            //we reverse bc sublist to cb sunlist using auxilliary frunction rev defined above
            h=cb;                   
            a->next=cb;                //we add the reverse sublist cb to left sublist's right end a

            if(d==ans)d=nullptr;      //if right sublist is empty
            
            h=ans;                  //we traverse main list and wherever nullptr is encountered we add the left end of right sublist
            while(h!=nullptr)
            {
                if(h->next==nullptr)
                {
                    h->next=d;break;
                }
                h=h->next;
            }
            //this iterates till all n/k-sublists are reversed
            
        }
        return ans->next;            //at last we return the modified list excluding the node we added for our convenience
    }
};
