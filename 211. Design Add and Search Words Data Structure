/*
211. Design Add and Search Words Data Structure

Design a data structure that supports adding new words and finding if a string matches any previously added string.

Implement the WordDictionary class:

WordDictionary() Initializes the object.
void addWord(word) Adds word to the data structure, it can be matched later.
bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.
 

Example:

Input
["WordDictionary","addWord","addWord","addWord","search","search","search","search"]
[[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]
Output
[null,null,null,null,false,true,true,true]

Explanation
WordDictionary wordDictionary = new WordDictionary();
wordDictionary.addWord("bad");
wordDictionary.addWord("dad");
wordDictionary.addWord("mad");
wordDictionary.search("pad"); // return False
wordDictionary.search("bad"); // return True
wordDictionary.search(".ad"); // return True
wordDictionary.search("b.."); // return True
 

Constraints:

1 <= word.length <= 25
word in addWord consists of lowercase English letters.
word in search consist of '.' or lowercase English letters.
There will be at most 2 dots in word for search queries.
At most 104 calls will be made to addWord and search.*/


class WordDictionary {
public:
    struct node
    {
        char ch;                        //stores character
        unordered_map<char,node*> mp;   //stores next linked characters if present
        bool isLeaf=false;              //stores if word path from root till the node is a word
    };

    node* root;

    WordDictionary() 
    {
        root= new node();                   //root node
        root->ch='/';
    }
    
    void addWord(string word) {
        auto n=root;
        int i=0;                                        //index variable

        //we iterate through word indexes and if next character is not linked to current character in trie, we create a node and then traverse through it else we traverse through the node
        while(i<word.size())                            
        {
            if(n->mp.find(word[i])==n->mp.end())
            {
                n->mp[word[i]]=new node();
                n->mp[word[i]]->ch=word[i];
            }
            
            n=n->mp[word[i]];
            i++;            
        }
        n->isLeaf=true;         //at last we mark isLeaf true,to mark presence of word in thr trie from root to current node
    }
    
    bool search(string word) 
    {
        return dfs(word,root,0);                    //we traverse the trie via DFS and return if word is found
    }

    bool dfs(string& word,node* n,int ind) {
        if(ind==word.size()) return n->isLeaf;      //if index==word length, we check if it is a leaf node and return accordingly
        
        if(word[ind]!='.')                          //if character not wildcard
        {
                                                    //we check if the character is a child.if it is we traverse down.else we return false
            if(n->mp.find(word[ind])==n->mp.end())  
            return false;
            else                    
            return dfs(word,n->mp[word[ind]],ind+1);
        }
        else
        {                                               
                                                    //if it is a wildcard, we loop around all children and traverse down all of them.whenever a match is found,we return true
            for(auto p:n->mp)
            if(dfs(word,p.second,ind+1)) return true;
        }

        return false;                                   //else we return false. this case happens if characters or wildcards are found but they are not leaf
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */
