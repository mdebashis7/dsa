/*
36. Valid Sudoku

Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'.
*/
class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        unordered_set<char> s;  
        //first we check if any rows have repeated elements.if they do,we return false
        for(int i=0;i<9;i++)
        {
            s.clear();
            for(int j=0;j<9;j++)
            if(board[i][j]!='.')
            {
                if(s.find(board[i][j])==s.end())
                s.insert(board[i][j]);
                else
                return false;
            }
        }

        //then we check if any columns have repeated elements.if they do,we return false
        for(int i=0;i<9;i++)
        {
            s.clear();
            for(int j=0;j<9;j++)
            if(board[j][i]!='.')
            {
                if(s.find(board[j][i])==s.end())
                s.insert(board[j][i]);
                else
                return false;
            }
        }

        //Then we check in 9 mini squares for repeating elements. We keep 9 zeroes in a 3*3 matrix.
        //We check a mini square and place 1 bit in a digit of the corresponding 0 if that digit is placed in the mini square
        vector<vector<int>> a(3,vector<int> (3,0));
        for(int i=0;i<9;i++)
        {
            for(int j=0;j<9;j++)
            {
                if(board[i][j]!='.')
                {
                    if(a[i/3][j/3]&(1<<(board[i][j]-'0')))
                    return false;
                    else
                    a[i/3][j/3]|=(1<<(board[i][j]-'0'));
                }
            }
        }
        //else we return true
        return true;


    }
};
