/*
30. Substring with Concatenation of All Words

You are given a string s and an array of strings words. All the strings of words are of the same length.

A concatenated string is a string that exactly contains all the strings of any permutation of words concatenated.

For example, if words = ["ab","cd","ef"], then "abcdef", "abefcd", "cdabef", "cdefab", "efabcd", and "efcdab" are all concatenated strings. "acdbef" is not a concatenated string because it is not the concatenation of any permutation of words.
Return an array of the starting indices of all the concatenated substrings in s. You can return the answer in any order.

 

Example 1:

Input: s = "barfoothefoobarman", words = ["foo","bar"]

Output: [0,9]

Explanation:

The substring starting at 0 is "barfoo". It is the concatenation of ["bar","foo"] which is a permutation of words.
The substring starting at 9 is "foobar". It is the concatenation of ["foo","bar"] which is a permutation of words.

Example 2:

Input: s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]

Output: []

Explanation:

There is no concatenated substring.

Example 3:

Input: s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]

Output: [6,9,12]

Explanation:

The substring starting at 6 is "foobarthe". It is the concatenation of ["foo","bar","the"].
The substring starting at 9 is "barthefoo". It is the concatenation of ["bar","the","foo"].
The substring starting at 12 is "thefoobar". It is the concatenation of ["the","foo","bar"].

 

Constraints:

1 <= s.length <= 104
1 <= words.length <= 5000
1 <= words[i].length <= 30
s and words[i] consist of lowercase English letters.*/


class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        int sz=words[0].size(),tot=sz*words.size(); //sz stores size of 1 wors and tot stores total size of all words

        //we store the words in a hashmap st
        unordered_map<string,int> st,st1;
        for(auto str:words)
        st[str]++;

        vector<int> ans;            //to store answer indexes

        //we iterate through the indexes and create a sliding window of size tot.then inside the window,we put the words of size sz into hashmap st1.if at end both hasmaps st and st1 are identical,the index is inserted in ans vector
        
        for(int i=0;i+tot<=s.size();i++)
        {
            int c=0;
            for(int j=i;c<words.size();j+=sz)
            {
                st1[s.substr(j,sz)]++;c++;
            }
            if(st1==st)
            ans.push_back(i);

            st1.clear();
        }

        return ans;
    }
};
