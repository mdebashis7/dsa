/*

235. Lowest Common Ancestor of a Binary Search Tree

Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

 

Example 1:


Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.
Example 2:


Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
Output: 2
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.
Example 3:

Input: root = [2,1], p = 2, q = 1
Output: 2
 

Constraints:

The number of nodes in the tree is in the range [2, 105].
-109 <= Node.val <= 109
All Node.val are unique.
p != q
p and q will exist in the BST.*/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    void dfs(TreeNode* r,vector<int>& nodes,vector<int>& depth,int d,unordered_map<int,TreeNode*>& hashmap)
    {
        if(r==nullptr) return;

        hashmap[r->val]=r;                      //we map node->val to node inside hashmap

        nodes.push_back(r->val);                //we insert r->val and its depth into the vectors nodes and depth
        depth.push_back(d);
        
        dfs(r->left,nodes,depth,d+1,hashmap);      //then we traverse to left subtree

        nodes.push_back(r->val);                //then we again insert r->val and its depth into the vectors nodes and depth in order of flow of control
        depth.push_back(d);

        dfs(r->right,nodes,depth,d+1,hashmap);      //then we traverse to right subtree

        nodes.push_back(r->val);                    //then we again insert r->val and its depth into the vectors nodes and depth in order of flow of control
        depth.push_back(d);
    }

    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        vector<int> nodes,depth;                //to store values of nodes and their depths
        unordered_map<int,TreeNode*> hashmap;   //to map node values to nodes

        dfs(root,nodes,depth,0,hashmap);        //we do a special dfs for this

        int index1=find(nodes.begin(),nodes.end(),p->val)-nodes.begin();        //we find indexes of p->val and q->val inside nodes vector
        int index2=find(nodes.begin(),nodes.end(),q->val)-nodes.begin();

        if(index1>index2) swap(index1,index2);          //helps to traverse between the indexes
                                                        //then we find the node with minimum depth between those 2 indexes which is the lowest common ancestor of the nodes p and q
        int minDepth=INT_MAX,ind=-1;

        for(int i=index1;i<=index2;i++)
        {
            if(depth[i]<minDepth)
            {
                minDepth=depth[i];
                ind=i;
            }
        }

        return hashmap[nodes[ind]];

    }
};
