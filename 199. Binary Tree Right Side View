/*
199. Binary Tree Right Side View

Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

 

Example 1:

Input: root = [1,2,3,null,5,null,4]

Output: [1,3,4]

Explanation:



Example 2:

Input: root = [1,2,3,4,null,null,null,5]

Output: [1,3,4,5]

Explanation:



Example 3:

Input: root = [1,null,3]

Output: [1,3]

Example 4:

Input: root = []

Output: []

 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> ans;                      //to store right side elements
        queue<pair<TreeNode*,int>> q;        //we do a BFS on the tree
        if(root!=nullptr)
        q.push({root,0});

        while(!q.empty())
        {
            auto x=q.front();q.pop();
            if(x.second==ans.size())                  //if it is the first element at particular depth,we push it onto ans
            ans.push_back(x.first->val);
            else                                      //else if any element exists at particular depth,we replace it by an element at same depth but existing on its RHS
            ans[x.second]=x.first->val;

            if(x.first->left)q.push({x.first->left,x.second+1});
            if(x.first->right)q.push({x.first->right,x.second+1});    
        }
        return ans;
    }
};
