/*
981. Time Based Key-Value Store

Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.

Implement the TimeMap class:

TimeMap() Initializes the object of the data structure.
void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp.
String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp. If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns "".
 

Example 1:

Input
["TimeMap", "set", "get", "get", "set", "get", "get"]
[[], ["foo", "bar", 1], ["foo", 1], ["foo", 3], ["foo", "bar2", 4], ["foo", 4], ["foo", 5]]
Output
[null, null, "bar", "bar", null, "bar2", "bar2"]

Explanation
TimeMap timeMap = new TimeMap();
timeMap.set("foo", "bar", 1);  // store the key "foo" and value "bar" along with timestamp = 1.
timeMap.get("foo", 1);         // return "bar"
timeMap.get("foo", 3);         // return "bar", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is "bar".
timeMap.set("foo", "bar2", 4); // store the key "foo" and value "bar2" along with timestamp = 4.
timeMap.get("foo", 4);         // return "bar2"
timeMap.get("foo", 5);         // return "bar2"
 

Constraints:

1 <= key.length, value.length <= 100
key and value consist of lowercase English letters and digits.
1 <= timestamp <= 107
All the timestamps timestamp of set are strictly increasing.
At most 2 * 105 calls will be made to set and get.*/

class TimeMap {
public:
    unordered_map<string,int> keyIndex;              //we assign a key to an index at which its timestamps and values are stored in the vector "timeValue"
    vector<vector<pair<int,string>>> timeValue;      //timestamps and values are stored as pairs in a vector, of a particular key, at index keyIndex[key]
    TimeMap() {
        
    }
    
    void set(string key, string value, int timestamp) {
        if(keyIndex.find(key)==keyIndex.end())              //if the key isnt recorded,we assign it an index in keyIndex map and store the timestamp,value pair in a new vector and push the vector to end of timeValue
        {
            keyIndex[key]=timeValue.size();
            timeValue.push_back({{timestamp,value}});
        }
        else                                                //else if it exists,we push the timestamp,value pair into the vector corresponding to index=keyIndex[key]
        {
            timeValue[keyIndex[key]].push_back({timestamp,value});
        }
    }
    
    string get(string key, int timestamp) {
        if(keyIndex.find(key)==keyIndex.end()) return "";          //key doesnt exist,so we return empty string
        
        int l=0,r=timeValue[keyIndex[key]].size()-1;              //else we do binary search on the vector corresponding to index=keyIndex[key] and return that particular value where timestamp <= given code stamp
        while(l<=r)
        {
            int m=l+(r-l)/2;
            if(timeValue[keyIndex[key]][m].first==timestamp)
            return timeValue[keyIndex[key]][m].second;
            else if(timeValue[keyIndex[key]][m].first<timestamp&&((m+1<timeValue[keyIndex[key]].size()&&timeValue[keyIndex[key]][m+1].first>timestamp)||(m+1==timeValue[keyIndex[key]].size())))
            return timeValue[keyIndex[key]][m].second;
            else if(timeValue[keyIndex[key]][m].first<timestamp)
            l=m+1;
            else
            r=m-1;
        }
        return "";          //else we return empty string
    }
};

/**
 * Your TimeMap object will be instantiated and called as such:
 * TimeMap* obj = new TimeMap();
 * obj->set(key,value,timestamp);
 * string param_2 = obj->get(key,timestamp);
 */
