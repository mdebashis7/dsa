/*
91. Decode Ways

You have intercepted a secret message encoded as a string of numbers. The message is decoded via the following mapping:

"1" -> 'A'

"2" -> 'B'

...

"25" -> 'Y'

"26" -> 'Z'

However, while decoding the message, you realize that there are many different ways you can decode the message because some codes are contained in other codes ("2" and "5" vs "25").

For example, "11106" can be decoded into:

"AAJF" with the grouping (1, 1, 10, 6)
"KJF" with the grouping (11, 10, 6)
The grouping (1, 11, 06) is invalid because "06" is not a valid code (only "6" is valid).
Note: there may be strings that are impossible to decode.

Given a string s containing only digits, return the number of ways to decode it. If the entire string cannot be decoded in any valid way, return 0.

The test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:

Input: s = "12"

Output: 2

Explanation:

"12" could be decoded as "AB" (1 2) or "L" (12).

Example 2:

Input: s = "226"

Output: 3

Explanation:

"226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).

Example 3:

Input: s = "06"

Output: 0

Explanation:

"06" cannot be mapped to "F" because of the leading zero ("6" is different from "06"). In this case, the string is not a valid encoding, so return 0.

 

Constraints:

1 <= s.length <= 100
s contains only digits and may contain leading zero(s).*/


class Solution {
public:
    int numDecodings(string s) {
        
        //if starting index is zero,its invalid. Also, we have to take 0 with its previous indexed number.So pesence of 30,40,50,60,70,80,90,00 makes the string, invalid

        if(s[0]=='0'||s.find("00")!=-1||s.find("30")!=-1||s.find("40")!=-1||s.find("50")!=-1||s.find("60")!=-1||s.find("70")!=-1||s.find("80")!=-1||s.find("90")!=-1)

        return 0;

        //we create 2 dp arrays
        //dp1 means no. of ways the string ends at that index, with that index taken as a single code.
        //dp2 means no. of ways, the string ends at that index, with that index taken together with its previous index, as a single code.
        vector<int> dp1(s.size(),0),dp2(s.size(),0);

        int i=0;            //to iterate within s

        //if 1st index is 0
        if(i+1<s.size() && s[i+1]=='0')     
        {
            // 0th index can only be taken singly because of lack of index before 0th index
            dp1[i]=1;
            dp2[i]=0; 

            //1st index being 0, can be taken only together with 0th index
            dp1[i+1]=0;
            dp2[i+1]=dp1[i];   

            //we iterate i to 2nd index directly
            i+=2;   
        }
        //here 0th index and 1st index if taken together exceed 26 hence cant be used together
        else if(i+1<s.size() && stoi(string(1,s[i])+s[i+1])>26)
        {
            // 0th index can only be taken singly because of lack of index before 0th index
            dp1[i]=1;
            dp2[i]=0;

            //1st index can be taken only singly because when together with 0th index,it exceeds 26
            dp1[i+1]=dp1[i]+dp2[i];
            dp2[i+1]=0;

            //we iterate i to 2nd index directly
            i+=2;
        }
        else
        {
            // 0th index can only be taken singly because of lack of index before 0th index
            dp1[i]=1;
            dp2[i]=0;

            //we iterate to 1st index
            i++;
        }

        while(i<s.size())
        {
            
            if(s[i]=='0')
            {
                dp1[i]=0;           //ith index can't be single
                dp2[i]=dp1[i-1];    //to be double,it has to be together with (i-1)th index
                i++;                //we ietrate to next character
            }


            else if(i+1<s.size() && s[i+1]=='0')        //next index is zero
            {
                //ith index can be single even if (i-1)th index is single or together
                dp1[i]=dp1[i-1]+dp2[i-1];

                //if (i-1)th index together with ith index is less than 26, they can be together but only if (i-1)th index is single
                if(stoi(string(1,s[i-1])+s[i])<=26)
                dp2[i]=dp1[i-1]; 

                dp1[i+1]=0;             //since (i+1)th index is 0 and it cant be single
                dp2[i+1]=dp1[i];        //it should be together with ith index if it is single

                i+=2;           //we update i to i+2
            }

            //ith index together with (i+1)th index exceed 26, so both cant be together
            else if(i+1<s.size() && stoi(string(1,s[i])+s[i+1])>26)
            {
                //ith index can be single even if (i-1)th index is single or together
                dp1[i]=dp1[i-1]+dp2[i-1];

                //if (i-1)th index together with ith index is less than 26, they can be together but only if (i-1)th index is single
                if(stoi(string(1,s[i-1])+s[i])<=26)
                dp2[i]=dp1[i-1];


                //(i+1)th can be single when either ith index is single or is together with (i-1)th index
                dp1[i+1]=dp1[i]+dp2[i];
                //since ith index and (i+1)th index cant be together as they exceed 26
                dp2[i+1]=0;

                i+=2;       //we update i to i+2
            }
            else
            {
                //ith index can be single even if (i-1)th index is single or together
                dp1[i]=dp1[i-1]+dp2[i-1];   

                //if (i-1)th index together with ith index is less than 26, they can be together but only if (i-1)th index is single
                if(stoi(string(1,s[i-1])+s[i])<=26)
                dp2[i]=dp1[i-1];
                
                i++;            //we update i to next index
            }
   
        }
        

        //we return no. of ways, the last index can be single or together with the previous index 
        return dp1.back()+dp2.back();
    }
};
