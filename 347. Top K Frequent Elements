/*
347. Top K Frequent Elements

Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.
 

Example 1:
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

Example 2:
Input: nums = [1], k = 1
Output: [1]
 

Constraints:
1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.
 

Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
*/

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> hashmap;     //stores frequency of numbers
        int m=0;                            //max frequency to create buckets
        for(auto i:nums)
        {
            hashmap[i]++;
            m=max(m,hashmap[i]);
        }

        vector<vector<int>> buckets(m+1);       //buckets are created and elemets are put in them as per their frequency; so element having x frequency is put in xth bucket
        for(auto p:hashmap)
            buckets[p.second].push_back(p.first);

        vector<int> ans;
        for(int i=m;i>=0;i--)               //retrive elements from buckets in reverse order to find top k frequent elements. the loop is broken whenever length of ans vector is k
        {
            for(auto j:buckets[i])
            {
                ans.push_back(j);
                if(ans.size()==k)
                break;
            }
            if(ans.size()==k)
                break;
        }
        return ans;
    }
};
