/*
787. Cheapest Flights Within K Stops
Solved
Medium
Topics
premium lock icon
Companies
There are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.

You are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.

 

Example 1:


Input: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1
Output: 700
Explanation:
The graph is shown above.
The optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.
Note that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.
Example 2:


Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1
Output: 200
Explanation:
The graph is shown above.
The optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200.
Example 3:


Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0
Output: 500
Explanation:
The graph is shown above.
The optimal path with no stops from city 0 to 2 is marked in red and has cost 500.
 

Constraints:

1 <= n <= 100
0 <= flights.length <= (n * (n - 1) / 2)
flights[i].length == 3
0 <= fromi, toi < n
fromi != toi
1 <= pricei <= 104
There will not be any multiple flights between two cities.
0 <= src, dst, k < n
src != dst
*/

class Solution {
public:
    
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        if(src==dst) return 0;                  //no flight required
        vector<int> cost(n+1,INT_MAX);          //to store intermediate cost at end of each stop
        cost[src]=0;                            


        for(int i=1;i<=k+1;i++)          //we iterate until k+1 th stop
        {
            auto temp=cost;                //we have a copy of costs,since in 1 round we board just 1 flight. not doing so may cause multiple flights to be taken as changes are cascaded in iteration of flights
            for(auto v:flights)          //then we iterate across the flights.if at any point,cost[a]+cost<temp[b],provided cost[a]!=INT_MAX,we change temp[b]=cost[a]+cost. 
            {
                if(cost[v[0]]!=INT_MAX&&cost[v[0]]+v[2]<temp[v[1]])
                temp[v[1]]=min(temp[v[1]],cost[v[0]]+v[2]);
            }
            cost=temp;                        //at last,we assign temp vector to cost,after 1 round of flights from each src
        }
        if(cost[dst]==INT_MAX) return -1;          //meaning we cant reach dst in k+1 rounds
        return cost[dst];
    }
};
