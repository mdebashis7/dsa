/*
7. Reverse Integer

Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
 

Constraints:

-231 <= x <= 231 - 1*/


class Solution {
public:
    int reverse(int x) {
        string s=to_string(x);              //we convert the integer to a string
        if(x<0)                         
        {
            //if the integer is negative,we compare it to INT_MIN since its reverse can be less than that
            string mi=to_string(INT_MIN);   

            mi=mi.substr(1);            //to remove '-' sign
            
            s=s.substr(1);              //to remove '-' sign
            
            std::reverse(s.begin(),s.end());        //reverse of the number
            if(s.size()<mi.size())                  //reverse has more digits than INT_MIN
            {
                return -stoi(s);
            }
            else if(s.size()>mi.size()) return 0;       //reverse has less digits than INT_MIN hence is smaller
            else
            {
                //else we compare digit-by-digit. 
                //In any case,if a digit of reversed number is more than corresponding digit of INT_MIN,we return zero,since the reversed number would also be greater. 
                //Also, if the digit of reversed number is less than corresponding digit of INT_MIN,we return the negative int form of the reversed number,since it would also be less.
                //else we carry on the comparison.
                for(int i=0;i<s.size();i++)
                {
                    if(s[i]>mi[i]) return 0;
                    else if(s[i]<mi[i]) break;
                }

                return -stoi(s);        //we return negative of the reversed number
            }
        }
        else
        {
            //if the integer is positive,we compare it to INT_MAX since its reverse can be more than that
            string ma=to_string(INT_MAX);

            std::reverse(s.begin(),s.end());        //reverse of the number

            if(s.size()<ma.size())                  //reverse has less digits than INT_MIN,hence is less
            {
                return stoi(s);
            }
            else if(s.size()>ma.size()) return 0;           //reverse has more digits than INT_MAX,hence is greater
            else
            {
                //else we compare digit-by-digit. 
                //In any case,if a digit of reversed number is more than corresponding digit of INT_MAX,we return zero,since the reversed number would also be greater. 
                //Also, if the digit of reversed number is less than corresponding digit of INT_MAX,we return the int form of the reversed number,since the reversed number would also be lesser. 
                //else we carry on th comparison.
                for(int i=0;i<s.size();i++)
                {if(s[i]>ma[i]) return 0;
                else if(s[i]<ma[i]) break;}

                return stoi(s);             //we return reversed number
            }

        }
        return 0;
        
    }
};
