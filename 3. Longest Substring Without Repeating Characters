/*

3. Longest Substring Without Repeating Characters


Given a string s, find the length of the longest substring without duplicate characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.*/


class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int ans=0;

        int left=0,right=0;             //to denote start and end of substring
        unordered_set<char> hashset;        //to store characters in the substring

        for(int right=0;right<s.size();right++)
        {
            if(hashset.find(s[right])==hashset.end())       //if next character not present in hashset, we can extend the substring
            hashset.insert(s[right]);

            else
            {                                               //else we decrease the size of substring from left till same character is encountered
                for(;s[left]!=s[right];left++)
                hashset.erase(s[left]);

                left++;
            }

            ans=max(ans,right-left+1);              //ans =max of ans and current size of substring
        }

        return ans;

    }
};
