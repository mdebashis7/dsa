/*
212. Word Search II

Given an m x n board of characters and a list of strings words, return all words on the board.

Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

 

Example 1:


Input: board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]

Example 2:


Input: board = [["a","b"],["c","d"]], words = ["abcb"]
Output: []
 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 12
board[i][j] is a lowercase English letter.
1 <= words.length <= 3 * 104
1 <= words[i].length <= 10
words[i] consists of lowercase English letters.
All the strings of words are unique.*/


class Solution {
public:
    struct node                                     //structure of trie node
    {
        char ch='?';
        unordered_map<char,node*> children;
        bool isLeaf=false;
    };

    void dfs(vector<vector<char>>& board,node* r,string& str,vector<vector<bool>>& visited,unordered_set<string>& a,int i,int j,int& m,int& n)
    {
        if(i<0||i>=m||j<0||j>=n||visited[i][j]) return;         //if i or j goes out of dimensions or the cell is visited earlier

        visited[i][j]=true;                                 //signifies we visit this cell
        str+=r->ch;                                         //we add current cell character to cyrrent string

        //cout<<str<<endl;

        if(r->isLeaf==true)                                 //if the current string is in trie,we insert it in hashset a
        a.insert(str);

        //now we do dfs to neighboring cells of board[i][j] if they are children of current node r

        if(i+1<m&&r->children.find(board[i+1][j])!=r->children.end())       
            dfs(board,r->children[board[i+1][j]],str,visited,a,i+1,j,m,n);

        if(i>0&&r->children.find(board[i-1][j])!=r->children.end()) 
            dfs(board,r->children[board[i-1][j]],str,visited,a,i-1,j,m,n);

        if(j+1<n&&r->children.find(board[i][j+1])!=r->children.end()) 
            dfs(board,r->children[board[i][j+1]],str,visited,a,i,j+1,m,n);

        if(j>0&&r->children.find(board[i][j-1])!=r->children.end()) 
            dfs(board,r->children[board[i][j-1]],str,visited,a,i,j-1,m,n);

        visited[i][j]=false;                //we unvisit this cell and pop off current character as well,while returning
        str.pop_back();        
    }

    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        auto root=new node();           //root node creation
        root->ch='/';

        for(auto s:words)                                       //we iterate through the words and create a trie structure accordingly
        {
            int i=0;                                            //index of word
            auto r=root;                                        //copy of root node

            while(i<s.size())
            {
                if(r->children.find(s[i])==r->children.end())       //if child not present,create it as per character
                {
                    r->children[s[i]]=new node();
                    r->children[s[i]]->ch=s[i];
                }
                r=r->children[s[i]];                                //traverse down the child
                i++;                                                //update index
            }
            r->isLeaf=true;                                         //turn this flag when word's end is reached
        }

        unordered_set<string> a;                                    //to store words from board as per trie
        string str="";                                              //stores current string

        int m=board.size(),n=board[0].size();                       //dimensions of board

        vector<vector<bool>> visited(m,vector<bool> (n,false));         //to know if the cell has been visited or not

        for(int i=0;i<board.size();i++)
        {
            for(int j=0;j<board[0].size();j++)
            {
                if(root->children.find(board[i][j])!=root->children.end())          //if the character is a child of root node, we perform DFS
                {dfs(board,root->children[board[i][j]],str,visited,a,i,j,m,n);}
            }
        }
        
        vector<string> ans(a.begin(),a.end());          //we create a vector from set a and return it
        return ans;
    }
};
