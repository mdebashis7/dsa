/*
239. Sliding Window Maximum

ou are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

 

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
1 <= k <= nums.length
*/

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<pair<int,int>> dq;                            //we create a deque,to store numbers in decreasing order of value.we also store their index so that the earlier occuring numbers can be popped off
        vector<int> ans;
        for(int i=0;i<k;i++)                                  //first we create the decreasing deque from first k size window
        {
            while(dq.size()>0&&dq.back().second<=nums[i])
            dq.pop_back();
            dq.push_back({i,nums[i]});
        }
        ans.push_back(dq[0].second);                        //we store max element of the deque in ans vector

        for(int i=k;i<nums.size();i++)                        //then we slide the k-size window
        {
            while(dq.size()>0&&dq[0].first<=(i-k))                //means any max number not in the window needs to be popped off
            dq.pop_front();

            while(dq.size()>0&&dq.back().second<=nums[i])          //ensures decreasing order in deque
            dq.pop_back();
            dq.push_back({i,nums[i]});                                //we push current element and its index

            ans.push_back(dq[0].second);                        //and finally we add max element in the ans vector
        }
        return ans;                  //we return ans vector
    }
};
