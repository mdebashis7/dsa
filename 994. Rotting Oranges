/*
994. Rotting Oranges

You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 10
grid[i][j] is 0, 1, or 2.
*/

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m=grid.size(),n=grid[0].size();                        //dimensions of grid
        vector<vector<bool>> visited(m,vector<bool> (n,false));    //stores if we have visited the grid square or not
        queue<pair<int,pair<int,int>>> q;                            //queue to store when a particular grid square turns rotten
        
        for(int i=0;i<m;i++)                    //we iterate throught the squares and push the rotten orange square onto queue along with time=0.also we mark visited=true as they have been dealt with
        for(int j=0;j<n;j++)
        if(grid[i][j]==2)
        {
            visited[i][j]=true;
        q.push({0,{i,j}});
        }

        int ans=0;
        while(!q.empty())
        {
            auto x=q.front();                                  //we go throught the queue elements one by one
            q.pop();
            
            int t=x.first,i=x.second.first,j=x.second.second;
            
            grid[i][j]=2;                                          //then mark it rotten

            if(i-1>=0&&grid[i-1][j]==1&&visited[i-1][j]==false)          //then we see if neighbors are not visited and are fresh oranges.if so,we push them onto the queue with time t+1 and mark them as visited
            {q.push({t+1,{i-1,j}});visited[i-1][j]=true;}
            if(i+1<m&&grid[i+1][j]==1&&visited[i+1][j]==false)
            {q.push({t+1,{i+1,j}});visited[i+1][j]=true;}
            if(j-1>=0&&grid[i][j-1]==1&&visited[i][j-1]==false)
            {q.push({t+1,{i,j-1}});visited[i][j-1]=true;}
            if(j+1<n&&grid[i][j+1]==1&&visited[i][j+1]==false)
            {q.push({t+1,{i,j+1}});visited[i][j+1]=true;}
            ans=max(ans,t);                                  //mean we can find min time after which all oranges would be rotten
            
        }
        for(auto i=0;i<m;i++)                    //now if there are any fresh oranges left,that means they are isolated and can't rot.so we return -1
        for(auto j=0;j<n;j++)
        if(grid[i][j]==1)
        return -1;

        return ans;                    //else we return ans
    }
};
