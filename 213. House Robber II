/*
213. House Robber II

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:

Input: nums = [2,3,2]
Output: 3
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.

Example 2:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.

Example 3:

Input: nums = [1,2,3]
Output: 3
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 1000*/

class Solution {
public:
    int rob(vector<int>& nums) {

        int n=nums.size();
        if(n==1) return nums[0];                                        
        else if(n==2) return max(nums[0],nums[1]);
        else if(n==3) return *max_element(nums.begin(),nums.end());

        vector<int> dp0(n,0),dp1(n,0),dp2(n,0);         
        
        //dp0 means 0th house is included so (n-1)th can't be included 

        dp0[0]=nums[0];
        dp0[2]=dp0[0]+nums[2];
        for(int i=3;i<n-1;i++)
            dp0[i]=max(dp0[i-2],dp0[i-3])+nums[i];
        
        //dp1 means 0th house not included,1st house is included so nth house can be included

        dp1[1]=nums[1];
        dp1[2]=nums[2];
        for(int i=3;i<n;i++)
            dp1[i]=max(dp1[i-2],dp1[i-3])+nums[i];

        //special case where 0th and 1st house are both excluded and operations can happen between 2nd and nth house
        dp2[2]=nums[2];
        for(int i=3;i<n;i++)
            dp2[i]=max(dp2[i-2],dp2[i-3])+nums[i];

        //we find max elements in all dp vectors and return max of them
        int m1=*max_element(dp0.begin(),dp0.end());
        int m2=*max_element(dp1.begin(),dp1.end());
        int m3=*max_element(dp2.begin(),dp2.end());

        return max({m1,m2,m3});


    }
};
