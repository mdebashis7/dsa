/*
355. Design Twitter

Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.

Implement the Twitter class:

Twitter() Initializes your twitter object.
void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.
List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.
void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.
void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.
 

Example 1:

Input
["Twitter", "postTweet", "getNewsFeed", "follow", "postTweet", "getNewsFeed", "unfollow", "getNewsFeed"]
[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]
Output
[null, null, [5], null, null, [6, 5], null, [5]]

Explanation
Twitter twitter = new Twitter();
twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).
twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]
twitter.follow(1, 2);    // User 1 follows user 2.
twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).
twitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.
twitter.unfollow(1, 2);  // User 1 unfollows user 2.
twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.
 

Constraints:

1 <= userId, followerId, followeeId <= 500
0 <= tweetId <= 104
All the tweets have unique IDs.
At most 3 * 104 calls will be made to postTweet, getNewsFeed, follow, and unfollow.
A user cannot follow himself.
*/

class Twitter {
public:
    int c=0;                                                //global variable to assign a tweet index to a tweet
    unordered_map<int,unordered_set<int>> follows;          //A person follows whom,doesnt include self    
    unordered_map<int,deque<pair<int,int>>> tweets;           //tweets of a person ,with tweet index

    Twitter() {
        
    }
    
    void postTweet(int userId, int tweetId) {
        tweets[userId].push_back({c,tweetId});        //we store tweet index c and tweet Id as a pair in deque of person 'userId'
        c++;                                          //update tweet index for next tweet
        if(tweets[userId].size()>10)                  //bcz just last 10 tweets are important-to be shown in feed
        tweets[userId].pop_front();
    }
    
    vector<int> getNewsFeed(int userId) {
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<>> pq;      //min heap to store pair of tweet index and tweet
        for(auto p:tweets[userId])        //we push a person's own tweets onto the heap.We only store recent 10 tweets
        {
            pq.push(p);
            if(pq.size()>10)
            pq.pop();
        }

        for(auto id:follows[userId])            //then we iterate across the persons whom userId follows and push their tweets onto the heap.At any instance,we just store 10 tweets in the heap,max.
        for(auto p:tweets[id])
        {
            pq.push(p);
            if(pq.size()>10)
            pq.pop();
        }

        vector<int> ans;                            //we move the most recent tweets(max 10) into the ans vector
        while(pq.size())
        {
            ans.push_back(pq.top().second);pq.pop();
        }
        reverse(ans.begin(),ans.end());    //since the tweets would be in order from least recent to most recent in min heap and then we return the ans vector
        return ans;
    }
    

    void follow(int followerId, int followeeId) {
        if(followerId!=followeeId)                  //since a person cant follow himself
        follows[followerId].insert(followeeId);
    }
    
    void unfollow(int followerId, int followeeId) {
        if(follows[followerId].find(followeeId)!=follows[followerId].end())    //if followerId follows followeeId
        follows[followerId].erase(followeeId);
    }
};

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter* obj = new Twitter();
 * obj->postTweet(userId,tweetId);
 * vector<int> param_2 = obj->getNewsFeed(userId);
 * obj->follow(followerId,followeeId);
 * obj->unfollow(followerId,followeeId);
 */
