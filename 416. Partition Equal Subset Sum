/*
416. Partition Equal Subset Sum

Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.

 

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 100
*/

class Solution {
public:
    
    bool canPartition(vector<int>& nums) {
        int s=0;                            //we find net sum of all numbers.if it is even, then partition is possible
        for(int i:nums)
        s+=i;

        if(s%2==1) return false;        //else not possible

        vector<bool> dp(s/2+1,false);            //we create a dp arrya to store if sums from 0 to s/2 are possible.
        dp[0]=true;                        //0 is possible using no elements
        for(auto num:nums)                    //we iterate through the elements
        {
            for(int i=s/2;i>=num;i--)          //we iterate from s/2 to the particular encountered number and if dp[i-num] is possible then dp[i] is possible using number num
            dp[i]=dp[i]||dp[i-num];
                                            //in each iteration,we store possibilities of making sums using just numbers encountered till now in dp vector
        }
        return dp.back();                    //shows if s/2 can be made up or not
    }
};
