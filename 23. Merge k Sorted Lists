/*

23. Merge k Sorted Lists

You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.
 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

Example 2:

Input: lists = []
Output: []

Example 3:

Input: lists = [[]]
Output: []
 

Constraints:

k == lists.length
0 <= k <= 104
0 <= lists[i].length <= 500
-104 <= lists[i][j] <= 104
lists[i] is sorted in ascending order.
The sum of lists[i].length will not exceed 104.*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
**/


class Solution {
public:

    struct comp                                     // Custom comparison struct for Min-Heap (smallest value at top)
    {
    bool operator()(ListNode* a, ListNode* b) {
        return a->val > b->val;  
    }
    };

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode* ans=new ListNode(INT_MAX),*h=ans;                 //ans holds a dummy node to hold the lsit address and h is used for traversal

        priority_queue<ListNode*,vector<ListNode*>,comp> pq;        //priority queue to auto sort lists based on value of node using custom comaprison struct comp

        for(auto l:lists)                                   //we just insert non-empty lists into minheap
        if(l!=nullptr)
        pq.push(l);

        while(pq.size()!=0)
        {
            auto l=pq.top();                                //pop out smallest node and append it to answer list
            pq.pop();

            h->next=l;
            h=h->next;                                      //increment h 

            if(l->next!=nullptr)                            //if next node of the smallest node l isn't nullptr,we push it into our minheap for the process to continue
            pq.push(l->next);
            
        }

        return ans->next;                                       //we return ans list without our dummy node

    }
};
