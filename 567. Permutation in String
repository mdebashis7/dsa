/*
567. Permutation in String

Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 

Constraints:

1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.
*/

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        if(s2.size()<s1.size()) return false;        //if size of s1 is more than s2,then s2 can't contain a permutation of s1
        vector<int> f1(26,0),f2(26,0);                //2 frequency vectors stories frequencies of characters in both strings

        //first we store frequency of characters of both strings in the respective vectors upto index s1.size() to see if first s1.size() characters in s2 are a permuation or not 
        for(int i=0;i<s1.size();i++)
        {
            f1[s1[i]-'a']++;
            f2[s2[i]-'a']++;
        }
        if(f1==f2) return true;      //if permutation,returns true

      //else we run a fixed size sliding window across s2 and check for equality of frequency vectors.if they match,it returns true

        int i=0,j=s1.size();        //starting and ending indexes of sliding window
        while(j<s2.size())
        {
            f2[s2[i]-'a']--;
            f2[s2[j]-'a']++;
            if(f1==f2) return true;
            j++;
            i++;
        }
        return false;            //if vectors dont match in any case,return false
    }
};
