/*
127. Word Ladder

A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.
Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.
 

Constraints:

1 <= beginWord.length <= 10
endWord.length == beginWord.length
1 <= wordList.length <= 5000
wordList[i].length == beginWord.length
beginWord, endWord, and wordList[i] consist of lowercase English letters.
beginWord != endWord
All the words in wordList are unique.
*/

class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> words;                                              //we put the allowed words in an unordered set form efficient checking
        for(auto s:wordList)
        words.insert(s);

        if(words.find(endWord)==words.end()) return 0;        //if it cant be done,then ans is zero as per question

        queue<pair<string,int>> q;                            //we have a queue which stores transformed word and steps required to reach there from beginWord as a pair
        unordered_set<string> visited;                        //we store words which have been inside the queue in visited
          
        q.push({beginWord,1});                                //we push beginWord with 1 in the queue and put it in visited as well
        visited.insert(beginWord);

        while(!q.empty())                                    //we run this loop till the queue runs out of words
        {
            auto x=q.front();                                //we take the first pair out of the queue
            q.pop();
            
            if(x.first==endWord)                            //if it is the endWord,we return the number of steps
            return x.second;

            for(int i=0;i<x.first.size();i++)              //else we iterate through its characters for changing those one-by-one
            {
                auto c=x.first[i];                          //we store original character at index i,to be restored after the changes
                for(char k='a';k<='z';k++)                  //we place all alphabets at index i,one-by-one
                {
                    x.first[i]=k;
                    if(words.find(x.first)!=words.end()&&visited.find(x.first)==visited.end())          //if the changed word is in words set but not in visited set,we put it at end of queue.steps will be 1 more than original word
                    {
                        q.push({x.first,x.second+1});
                        visited.insert(x.first);
                    }
                }
                x.first[i]=c;        //we restore the character at end,since just 1 change is allowed at a time
            }
        }
        return 0;        //means that change cant be done
    }
};
