/*
205. Isomorphic Strings

Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

 

Example 1:

Input: s = "egg", t = "add"

Output: true

Explanation:

The strings s and t can be made identical by:

Mapping 'e' to 'a'.
Mapping 'g' to 'd'.
Example 2:

Input: s = "foo", t = "bar"

Output: false

Explanation:

The strings s and t can not be made identical as 'o' needs to be mapped to both 'a' and 'r'.

Example 3:

Input: s = "paper", t = "title"

Output: true

 

Constraints:

1 <= s.length <= 5 * 104
t.length == s.length
s and t consist of any valid ascii character.*/

class Solution {
public:
    bool isIsomorphic(string s, string t) {
        if(s.size()!=t.size()) return false;        //sizes need to be same

        unordered_map<char,char> hashmap,revmap;    //stores character mapping and reverse mapping

        for(int i=0;i<s.size();i++)
        {
            if(hashmap.find(s[i])==hashmap.end())       //character not mapped in s
            {
                //character in t should not be mapped to multiple characters in s
                if(revmap.find(t[i])!=revmap.end()) return false;   

                hashmap[s[i]]=t[i];
                revmap[t[i]]=s[i];
            }
            else if(hashmap[s[i]]==t[i]) continue;

            else if(hashmap[s[i]]!=t[i]) return false;  //discrepancy in mapping of charcater in s
        }

        return true;
    }
};
