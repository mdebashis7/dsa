/*
70. Climbing Stairs

You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45*/


class Solution {
public:
    int climbStairs(int n) {
        if(n==0||n==1) return 1;        //there is just 1 way of reaching stair 0 or 1
        else if(n==2) return 2;         //there are 2 ways of reaching stair 2, either 0+2 or 1+1
        
        vector<int> dp(n+1,0);          //dp array to store intermediate values

        dp[0]=1;
        dp[1]=1;
        dp[2]=2;

        for(int i=3;i<n+1;i++)          //since to reach stair n, we can do (n-1)+1 or (n-2)+2
        dp[i]=dp[i-2]+dp[i-1];

        return dp.back();               //return last i.e (n+1)th value which is for nth stair
    }
};
