/*
392. Is Subsequence

Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

 

Example 1:

Input: s = "abc", t = "ahbgdc"
Output: true

Example 2:

Input: s = "axc", t = "ahbgdc"
Output: false
 

Constraints:

0 <= s.length <= 100
0 <= t.length <= 104
s and t consist only of lowercase English letters.
 

Follow up: Suppose there are lots of incoming s, say s1, s2, ..., sk where k >= 109, and you want to check one by one to see if t has its subsequence. In this scenario, how would you change your code?*/

class Solution {
public:
    bool isSubsequence(string s, string t) {
        if(t.size()<s.size()) return false;             //since t can't be smaller than s 
        else if(t.size()==s.size() && t==s) return true;    //equal strings
        else if(t.size()==s.size()&& t!=s) return false;    //unequal strings

        //i is index of t and j is index of j
        //if s[j]==t[i], we focus on next character of s and t.else we match s[j] with next character of t
        int i=0,j=0;
        while(i<t.size()&&j<s.size())
        {
            if(s[j]==t[i])
            {
                j++;i++;
            }
            else
            i++;
        }

        //in the end,if j==s.size(),it means  all characters are matched,so we return true
        if(j==s.size()) return true;
        else return false;
    }
};
