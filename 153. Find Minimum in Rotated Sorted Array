/*

153. Find Minimum in Rotated Sorted Array


Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.

Example 2:

Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.

Example 3:

Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 
 

Constraints:

n == nums.length
1 <= n <= 5000
-5000 <= nums[i] <= 5000
All the integers of nums are unique.
nums is sorted and rotated between 1 and n times.*/


class Solution {
public:
    int findMin(vector<int>& nums) {
        if(nums.size()==1||nums[0]<nums.back()) return nums[0];     //if there is only 1 element then it is the smallest. also if the first number is less than the last, it means the array isn't rotated so the first is the smallest.

        int start=0,end=nums.size()-1;                      //indexes to show range of focus in binary search
        while(start<=end)
        {
            int mid=start+(end-start)/2;                    //mid index

            if(mid+1<nums.size()&&nums[mid]>nums[mid+1])            //if number at mid index is greater than the next number then the next number is smallest as it shows the boundary of separation
            return nums[mid+1];

            else if(mid-1>=0&&nums[mid]<nums[mid-1])            //if the number at mid index is greater than the previous number then the number at mid index is smallest
            return nums[mid];

            else if(nums[mid]>nums[0])                          //if number at mid index is more than first number then it shows the range to be focussed on is the second half of the array after mid upto end
            start=mid+1;

            else                                                //if number at mid index is less than first number then it shows the range to be focussed on is the first half of the array start upto mid
            end=mid-1;            
        }

        return nums[0];                                         //default case in case nothing is obtained from above proces
    }
};
