/*
290. Word Pattern

Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s. Specifically:

Each letter in pattern maps to exactly one unique word in s.
Each unique word in s maps to exactly one letter in pattern.
No two letters map to the same word, and no two words map to the same letter.
 

Example 1:

Input: pattern = "abba", s = "dog cat cat dog"

Output: true

Explanation:

The bijection can be established as:

'a' maps to "dog".
'b' maps to "cat".
Example 2:

Input: pattern = "abba", s = "dog cat cat fish"

Output: false

Example 3:

Input: pattern = "aaaa", s = "dog cat cat dog"

Output: false

 

Constraints:

1 <= pattern.length <= 300
pattern contains only lower-case English letters.
1 <= s.length <= 3000
s contains only lowercase English letters and spaces ' '.
s does not contain any leading or trailing spaces.
All the words in s are separated by a single space.*/


class Solution {
public:
    bool wordPattern(string pattern, string s) {
        //we separate words in s using index of spaces and store them in words
        vector<string> words;
        
        int f=s.find(' ');
        while(f!=-1)
        {
            words.push_back(s.substr(0,f));
            s=s.substr(f+1);
            f=s.find(' ');
        }
        words.push_back(s);



        if(words.size()!=pattern.size()) return false;  //since no.of words need to be = no.of characters in pattern

        unordered_map<char,string> hashmap;     //maps character in pattern to word in s
        unordered_map<string,char> revmap;      //reverse maps word in s to character in pattern

        for(int i=0;i<pattern.size();i++)
        {
            //either unique character and unique word should come at same index
            if(hashmap.find(pattern[i])==hashmap.end() && revmap.find(words[i])==revmap.end())
            {
                hashmap[pattern[i]]=words[i];
                revmap[words[i]]=pattern[i];
            }
            else if(hashmap[pattern[i]]==words[i]) continue;    //or if non unique comes,there mustn't be discrepancy
            else  return false;                                //if discrepancy,then coding isn't correct
        }

        return true;
    }
};
