/*

105. Construct Binary Tree from Preorder and Inorder Traversal

Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

 

Example 1:

Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]

Example 2:

Input: preorder = [-1], inorder = [-1]
Output: [-1]
 

Constraints:

1 <= preorder.length <= 3000
inorder.length == preorder.length
-3000 <= preorder[i], inorder[i] <= 3000
preorder and inorder consist of unique values.
Each value of inorder also appears in preorder.
preorder is guaranteed to be the preorder traversal of the tree.
inorder is guaranteed to be the inorder traversal of the tree.*/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


class Solution {
public:
    TreeNode* build(vector<int>& preorder, vector<int>& inorder, int start, int end, int& preindex, unordered_map<int,int>& inorderMap)    //function to return nodes after creation ; start and end denotes segment of inorder vector to look while creating nodes
    {
        if(start>end) return nullptr;           //denotes no elements in the segment of inorder vector so no node can be created

        else
        {
            int ind=inorderMap[preorder[preindex]];        //we find the index of the element at "preindex" index of preorder in inorder vector
           
            auto node=new TreeNode(preorder[preindex]);     //we create a node of the element at "preindex" index of preorder

            if(ind-1>=start)
            preindex++;                                 //we increment preindex to move on to next node to be created if left subtree exists

            node->left=build(preorder,inorder,start,ind-1,preindex,inorderMap);    //to create left subtree of the node, we pass on left half of the segment of inorder from ind index

            if(end>=ind+1)
            preindex++;                                 //we increment preindex to move on to next node to be created if right subtree exists

            node->right=build(preorder,inorder,ind+1,end,preindex,inorderMap);     //to create right subtree of the node, we pass on right half of the segment of inorder from ind index

            return node;
        }

        return nullptr;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(inorder.size()==0) return nullptr;       //no elements in tree,so nullptr

        unordered_map<int,int> inorderMap;
                                                    // Build hashmap for inorder indices
        for (int i = 0; i < inorder.size(); i++) 
            inorderMap[inorder[i]] = i;
        


        int preindex=0;                             //index of node to be created in preorder vector
        
        return build(preorder,inorder,0,inorder.size()-1,preindex,inorderMap);     
    }
};
