/*
130. Surrounded Regions

You are given an m x n matrix board containing letters 'X' and 'O', capture regions that are surrounded:

Connect: A cell is connected to adjacent cells horizontally or vertically.
Region: To form a region connect every 'O' cell.
Surround: The region is surrounded with 'X' cells if you can connect the region with 'X' cells and none of the region cells are on the edge of the board.
To capture a surrounded region, replace all 'O's with 'X's in-place within the original board. You do not need to return anything.

 

Example 1:

Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]

Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]

Explanation:


In the above diagram, the bottom region is not captured because it is on the edge of the board and cannot be surrounded.

Example 2:

Input: board = [["X"]]

Output: [["X"]]

 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 200
board[i][j] is 'X' or 'O'.
*/

class Solution {
public:
    void dfs(vector<vector<char>>& board,int i,int j,vector<vector<bool>>& visited)
    {
        if(i<0||i>=board.size()||j<0||j>=board[0].size()||visited[i][j]==true||board[i][j]=='X')          //if i,j move out of range or if we have visited the square or it there is aX,we return
        return;

        visited[i][j]=true;              //we mark the square as visited and the do dfs across all neighbors
        dfs(board,i-1,j,visited);
        dfs(board,i+1,j,visited);
        dfs(board,i,j-1,visited);
        dfs(board,i,j+1,visited);
    }
    void solve(vector<vector<char>>& board) {
        int m=board.size(),n=board[0].size();                    //dimensions of the board
        vector<vector<bool>> visited(m,vector<bool> (n,false));    //to store if we have visited a square or not

        for(int i=0;i<n;i++)                                          //we move across the borders and find a O.from there we do dfs,to mark all Os as visited which form a region with the original O
        {
            if(board[0][i]=='O'&&visited[0][i]==false)
            dfs(board,0,i,visited);
            if(board[m-1][i]=='O'&&visited[m-1][i]==false)
            dfs(board,m-1,i,visited);
        }
        for(int i=0;i<m;i++)
        {
            if(board[i][0]=='O'&&visited[i][0]==false)
            dfs(board,i,0,visited);
            if(board[i][n-1]=='O'&&visited[i][n-1]==false)
            dfs(board,i,n-1,visited);
        }
        for(int i=0;i<m;i++)                          //the Os not in any visited regions are surrounded and can be marked as X
        for(int j=0;j<n;j++)
        if(board[i][j]=='O'&&visited[i][j]==false)
        board[i][j]='X';

    }
};
