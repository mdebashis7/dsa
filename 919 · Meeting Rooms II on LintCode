/*
919 Â· Meeting Rooms II on LintCode

Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.
(0,8),(8,10) is not conflict at 8

Example
Example1

Input: intervals = [(0,30),(5,10),(15,20)]
Output: 2
Explanation:
We need two meeting rooms
room1: (0,30)
room2: (5,10),(15,20)
Example2

Input: intervals = [(2,7)]
Output: 1
Explanation: 
Only need one meeting room*/



/**
 * Definition of Interval:
 * class Interval {
 * public:
 *     int start, end;
 *     Interval(int start, int end) {
 *         this->start = start;
 *         this->end = end;
 *     }
 * }
 */

class Solution {
public:
    static bool comp(Interval& a,Interval& b)       //custom comparison function for sort
    {
        if(a.start!=b.start)
        return a.start<b.start;

        else return a.end<b.end;
    }

    
    
    int minMeetingRooms(vector<Interval> &intervals) {
        sort(intervals.begin(),intervals.end(),comp);           //we sort intervals

        priority_queue< int,  vector<int>,  greater<>> pq;      //we put end times in min heap

        int ans=0;

        for(int i=0;i<intervals.size();i++)
        {
            if((int)pq.size()==0 || intervals[i].start<pq.top())    //if heap is empty or this meeting overlaps with meeting with smallest ending time, push the interval's end time as a new room is required
            pq.push(intervals[i].end);

            else if(intervals[i].start>=pq.top())       //else if meeting time doesnt overlap,pop meetings until it reaches an overlapping meeting as they have finished
            {
               while((int)pq.size()>0&&intervals[i].start>=pq.top())
                pq.pop();
                
                pq.push(intervals[i].end);          //then push this meeting
            }

            ans=max(ans,(int)pq.size());        //ans is max min-heap size
        }
        return ans;
    }
};
