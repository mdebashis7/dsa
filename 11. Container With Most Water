/*
11. Container With Most Water

You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:

Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

Example 2:

Input: height = [1,1]
Output: 1
 

Constraints:

n == height.length
2 <= n <= 105
0 <= height[i] <= 104
*/

class Solution {
public:
    int maxArea(vector<int>& height) {
        int ans=0;                                                //to hold maximum volume
        int left=0,right=height.size()-1;                         //left and right indexes for 2-pointers approach

        while(left<=right)
        {
            int vol=min(height[left],height[right])*(right-left); //volume=minimum height of bars * distance between the bars
            ans=max(ans,vol);                                     //ans =max of ans and calculated volume

            if(height[left]<=height[right])                       //update index of whichever bar is smaller
            left++;
            else right--;
        }

        return ans;
    }
};
