/*
128. Longest Consecutive Sequence

Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.
 

Example 1:
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

Example 2:
Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9

Example 3:
Input: nums = [1,0,1,2]
Output: 3 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
*/


class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.size()==0) return 0;    // if nums has no elements, longest sequence has size 0

        unordered_set<int> hashset;        //we put the elements in hashset to bring down the time complexity of finding elements in nums to O(1)
        int ans=1;

        for(auto i:nums)
        hashset.insert(i);

        for(auto i:hashset)
        {
            if(hashset.find(i-1)==hashset.end())            //we execute this only for smallest number of a sequence
            {
                auto curr=i,length=1;                       //we store the smallest number in curr and initialize current length to 1 and we increment it and current number, if the next number is found in the hashset and store max of the lengths in ans
                while(hashset.find(curr+1)!=hashset.end())
                {
                    length++;
                    ans=max(ans,length);
                    curr++;
                }
            }
        }
        return ans;
    }
};
