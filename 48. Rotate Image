/*
48. Rotate Image

You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

 

Example 1:

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

Example 2:

Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
 

Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 20
-1000 <= matrix[i][j] <= 1000*/



class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n=matrix.size();                    //order of matrix

        int u=0,d=n-1,l=0,r=n-1;                //indexes to denote up,down,left and right rayers to be rotated
        vector<int> left,right,upper,lower;     //vectors to store left,right,upper and lower layers

        for(int i=0;i<n/2;i++)                  //since at max there can be n/2 operations
        {
            for(int j=l;j<=r;j++)               //element captured from upper layer 
            upper.push_back(matrix[u][j]);

            for(int j=u+1;j<=d;j++)             //element captured from right layer
            right.push_back(matrix[j][r]);

            for(int j=r-1;j>=l;j--)             //element captured from lower layer
            lower.push_back(matrix[d][j]);

            for(int j=d-1;j>=u;j--)             //element captured from left layer
            left.push_back(matrix[j][l]);

            for(int j=u;j<=d;j++)               //element inserted into right layer from upper layer
            matrix[j][r]=upper[j-u];

            for(int j=r-1;j>=l;j--)             //element inserted into lower layer from right layer
            matrix[d][j]=right[r-1-j];

            for(int j=d-1;j>=u;j--)             //element inserted into left layer from lower layer
            matrix[j][l]=lower[d-1-j];

            for(int j=l+1;j<r;j++)              //element inserted into upper layer from left layer
            matrix[u][j]=left[j-l-1];

            u++;l++;                            //updation of indexes to move inward
            r--;d--;

            left.clear();right.clear();upper.clear();lower.clear();     //for next iteration
        }
    }
};
