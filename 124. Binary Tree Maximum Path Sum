/*
124. Binary Tree Maximum Path Sum

A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any non-empty path.

 

Example 1:


Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.
Example 2:


Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.
 

Constraints:

The number of nodes in the tree is in the range [1, 3 * 104].
-1000 <= Node.val <= 1000*/



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


class Solution {
public:
    int dfs(TreeNode* r,int& ans)
    {
        if(r==nullptr) return 0;            

        int left=dfs(r->left,ans);              //calculates sum of left subtree
        int right=dfs(r->right,ans);                //calculates sum of right subtree

        ans=max(ans,max({r->val,r->val+left,r->val+right,r->val+left+right}));          //this holds max value where we include both subtrees and their parent in the path - works if some subtree has max path sum not including main root node  i.e max path sum doesnt flow up the tree here

        return max(r->val,r->val+max(left,right));          //this sends max value of path sum including atmost 1 subtree and root node -- works if max path sum continues up the tree
    }

    int maxPathSum(TreeNode* root) {
        if(root==nullptr) return 0;     //no nodes,so sum=0

        int ans=root->val;              //we inititalize ans to root node value

        int z=dfs(root,ans);            //special dfs to calculate max sum across a path

        return max(ans,z);              //we return max of z and ans
    }
};
