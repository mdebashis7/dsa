/*
198. House Robber

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.

Example 2:

Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 400*/


class Solution {
public:
    int rob(vector<int>& nums) {

        if(nums.size()<=2) return *max_element(nums.begin(),nums.end());

        vector<int> dp(nums.size(),0);                  //array to store max amt that can be looter upto that index

        dp[0]=nums[0];                          //since we can just loot 0th index
        dp[1]=nums[1];                          //since we cant loot 0th index and only loot 1st index
        dp[2]=dp[0]+nums[2];                    //since we can loot 0th and 2nd index but cant loot 1st index

        for(int i=3;i<nums.size();i++)
        {
            dp[i]=max(dp[i-2]+nums[i],dp[i-3]+nums[i]);     
            
            //1st case when 1,2,3...so 1+3=4 which is max
            //2nd case when 8,2,1,9...here max is 17 out of 8+1,2+9 and 8+9
        }

        return *max_element(dp.begin(),dp.end());       //we return max element in dp array
    }
};
