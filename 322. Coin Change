/*
322. Coin Change

You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.

 

Example 1:

Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1

Example 2:

Input: coins = [2], amount = 3
Output: -1

Example 3:

Input: coins = [1], amount = 0
Output: 0
 

Constraints:

1 <= coins.length <= 12
1 <= coins[i] <= 231 - 1
0 <= amount <= 104*/


class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        vector<int> dp(amount+1,INT_MAX);       //to store no. of coins needed for each amt upto amount

        dp[0]=0;                        //no coins needed for amount 0

        for(int i=1;i<=amount;i++)          //we iterate from amount 1 to given amount
        {
            for(auto c:coins)                   //for each coin,if coin value<= amount and dp[i-c] exists other than INT_MAX
            if(i-c>=0&&dp[i-c]!=INT_MAX)
            dp[i]=min(dp[i],dp[i-c]+1);         //min since we are minimizing. dp[i-c]+1 since we add 1 more coin than dp[i-c]

            //cout<<dp[i]<<" ";
        }

        if(dp.back()==INT_MAX) return -1;           //if INT_MAX, means amount can't be formed
        else return dp.back();
    }
};
