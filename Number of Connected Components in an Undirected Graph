/*
Number of Connected Components in an Undirected Graph

There is an undirected graph with n nodes. There is also an edges array, where edges[i] = [a, b] means that there is an edge between node a and node b in the graph.

The nodes are numbered from 0 to n - 1.

Return the total number of connected components in that graph.

Example 1:

Input:
n=3
edges=[[0,1], [0,2]]

Output:
1

Example 2:
Input:
n=6
edges=[[0,1], [1,2], [2,3], [4,5]]

Output:
2
Constraints:

1 <= n <= 100
0 <= edges.length <= n * (n - 1) / 2

*/


class Solution {
public:
    void dfs(vector<vector<int>>& adj,unordered_set<int>& visited,int parent,int curr)
    {
        if(visited.find(curr)!=visited.end()) return;

        visited.insert(curr);

        for(auto node:adj[curr])        //do dfs on neighbors apart from parent
        if(node!=parent)
        dfs(adj,visited,curr,node);
    }
    int countComponents(int n, vector<vector<int>>& edges) {
        vector<vector<int>> adj(n);         //to store neighbors

        for(auto v:edges)
        {
            adj[v[0]].push_back(v[1]);
            adj[v[1]].push_back(v[0]);
        }

        unordered_set<int> visited;         //to store visited nodes

        int ans=0;                          //holds number of connected components

        for(int i=0;i<n;i++)
        {
            if(visited.find(i)==visited.end())  //if node not visited,do dfs on it
            {
                dfs(adj,visited,-1,i);
                ans++;                      //increment ans as it is a separate component
            }
        }
        return ans;
    }
};
