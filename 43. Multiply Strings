43. Multiply Strings

/*
Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.

 

Example 1:

Input: num1 = "2", num2 = "3"
Output: "6"
Example 2:

Input: num1 = "123", num2 = "456"
Output: "56088"
 

Constraints:

1 <= num1.length, num2.length <= 200
num1 and num2 consist of digits only.
Both num1 and num2 do not contain any leading zero, except the number 0 itself.
*/

class Solution {
public:
    string multiply(string num1, string num2) {
        if(num2=="0"||num1=="0") return "0";      //product of a zero with anything is zero


        //reversing helps to multiply from lower significant digit to higher significant digit
        reverse(num1.begin(),num1.end());
        reverse(num2.begin(),num2.end());

        vector<int> ans;      //to hold digits of answer
        if(num1.size()>num2.size())
        swap(num1,num2);                //so num1 is always smaller number in terms of digits

        for(int i=0;i<num1.size();i++)
        {
            int m=num1[i]-'0';                //holds a digit of num1
            for(int j=0;j<num2.size();j++)
            {
                int n=num2[j]-'0';            //holds a digit of num2

                if(i+j<ans.size())            //if i+j th place is available in ans vector,add the product to that
                ans[i+j]+=m*n;
                else
                {
                    if(i+j==ans.size())        //else put that product at end of vector
                    ans.push_back(m*n);
                }
            }
            
        }

        //notice that eace place would not be 1 digit,so carry must be carried forward

        int c=0;
        for(int i=0;i<ans.size();i++)
        {
            ans[i]+=c;
            if(ans[i]<10)
            c=0;
            else
            {
                c=ans[i]/10;
                ans[i]%=10;
            }
        }
        //if there are leftover carry at end of vector,new digits must be added at end of vector
        while(c!=0)
        {
            ans.push_back(c%10);
            c=c/10;
        }
        //creation of string from ans vector

        string a="";
        for(int i=ans.size()-1;i>=0;i--)
        a+=to_string(ans[i]);

        return a;
    }
};
